<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[John's Blog]]></title>
  <subtitle><![CDATA[Beautiful Life]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://wenzhuang.me/"/>
  <updated>2015-12-24T10:27:37.474Z</updated>
  <id>http://wenzhuang.me/</id>
  
  <author>
    <name><![CDATA[John Venn]]></name>
    <email><![CDATA[wenzhuang2012@gmail.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[使用jQuery发送Ajax请求]]></title>
    <link href="http://wenzhuang.me/2015/12/21/%E4%BD%BF%E7%94%A8jQuery%E5%8F%91%E9%80%81Ajax%E8%AF%B7%E6%B1%82/"/>
    <id>http://wenzhuang.me/2015/12/21/使用jQuery发送Ajax请求/</id>
    <published>2015-12-21T11:00:55.000Z</published>
    <updated>2015-12-24T10:27:37.474Z</updated>
    <content type="html"><![CDATA[<p>传统网页与服务器通信往往需要通过提交整个表单来实现，这样用户不得不每次在提交表单时重刷整个页面，带来很不好的用户体验，在这个背景下Ajax应运而生。<br>　　AJAX 即Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。Ajax不是新的编程语言，而是一种使用现有标准的新方法。Ajax能在不重新加载整个页面的情况下，与服务器进行数据交换，实现网页局部刷新。AJAX是与服务器交换数据并更新部分网页的艺术。更多Ajax的基本概念和语法可以参考 <a href="http://www.w3school.com.cn/ajax/index.asp" target="_blank" rel="external">w3cschool的Ajax教程</a>。<br>　　<a id="more"></a><br>　　使用JavaScript发送Ajax请求需要使用XMLHttpRequest对象，但是这种方式比较繁琐，需要较大的代码量。更多关于JavaScript可以访问<a href="http://www.w3school.com.cn/js/index.asp" target="_blank" rel="external">w3cschool的JavaScript教程</a>。jQuery是JavaScript的一个库,极大简化了JS的编程，其中就包含了对Ajax请求的封装。更多详细的jQuery语法可以访问<a href="http://www.w3school.com.cn/jquery/index.asp" target="_blank" rel="external">w3cschool的jQuery教程</a>。<br>　　只要了解了基本的JS语法和Ajax的基本概念、jQuery选择器的使用，jQuery很快就能上手，使用起来非常方便。使用jQuery需要先到<a href="http://jquery.com/download/" target="_blank" rel="external">jQuery官网</a>下载你所需的jQuery库,jQuery类和函数的可以查询<a href="http://api.jquery.com/" target="_blank" rel="external">jQuery官方API文档</a>。<br>　　<img src="http://7xo4wg.com1.z0.glb.clouddn.com/github_logo.png" alt="此处输入链接的描述"><br>　　为此，笔者新建了一个Java web工程WebDemo，已上传至Github的<br><a href="https://github.com/WenZhuang/WebDemo" target="_blank" rel="external">WebDemo仓库</a>。在WebRoot目录下有一个AjaxDemo.html包含了此次前端页面的代码<a href="https://github.com/WenZhuang/WebDemo/blob/master/WebRoot/AjaxDemo.html" target="_blank" rel="external">AjaxDemo.html</a>。src目录下包含了响应网页的服务器端代码<a href="https://github.com/WenZhuang/WebDemo/blob/master/src/com/wenzhuang/servlet/AjaxDemoServlet.java" target="_blank" rel="external">AjaxDemoServlet</a>。<br>　　AjaxDemo.html的源代码如下。jQuery代码包含在script标签中，先引用了jQuery库的地址。在文档准备就绪后，给GET按钮和POST按钮添加点击监听事件。使用了jQuery的ajax([settings])函数去发送Ajax请求，参数是一系列用于描述请求信息的键值对。具体的函数描述请见<a href="http://api.jquery.com/jQuery.ajax/#jQuery-ajax-settings" target="_blank" rel="external">jQuery-ajax-settings</a>。<br>　　在发送get请求时设置请求的方法为GET，请求的URL为服务端的AjaxDemoServlet，数据交换格式为JSON，并且实现两个回调函数，分别在响应成功和失败时调用。如果服务请求成功，通过回调函数将取到一个JSON格式的数据。本例中该JSON对象转换为字符串后为{“name”:”wenzhuang”,”task”:”java”},可以通过回调函数使用data.name和data.task取到对应的值，并显示网页上。更多关于JSON请见<a href="http://www.w3school.com.cn/json/index.asp" target="_blank" rel="external">w3cschool的JSON教程</a>。<br>　　在发送post请求时，除了设置请求方法、请求URL，数据交换格式外，还需要设置一个JSON格式的数据作为请求实体发送到服务端。这里是取出用户填在表单中的用户名密码，发送到服务器，再通过回调函数取回服务端的验证信息，显示在网页上。网页的运行效果及截图请见<a href="https://github.com/WenZhuang/WebDemo/blob/master/README.md" target="_blank" rel="external">README.md</a>。</p>
<pre><code><span class="doctype">&lt;!DOCTYPE html&gt;</span>
<span class="tag">&lt;<span class="title">html</span>&gt;</span>
<span class="tag">&lt;<span class="title">head</span>&gt;</span>
<span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"js/jquery-2.1.4.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
<span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript">
$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
  $(<span class="string">"#getBtn"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
    $.ajax({
        type:<span class="string">"GET"</span>,
        url:<span class="string">"/WebDemo/servlet/AjaxDemoServlet"</span>,
        dataType:<span class="string">"json"</span>,
        success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>{
            $(<span class="string">"#data"</span>).html(data.name + <span class="string">'的任务是'</span> + data.task);
        },
        error:<span class="function"><span class="keyword">function</span>(<span class="params">jqXHR</span>)</span>{
             $(<span class="string">"#data"</span>).html(<span class="string">"发生错误:"</span>+jqXHR.status);
        }
    });
  });

   $(<span class="string">"#postBtn"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
      $.ajax({
        type:<span class="string">"POST"</span>,
        url:<span class="string">"/WebDemo/servlet/AjaxDemoServlet"</span>,
         data:{
           username:$(<span class="string">"#username"</span>).val(),
           password:$(<span class="string">"#password"</span>).val(),
        },
        dataType:<span class="string">"json"</span>,     
        success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>{
            <span class="keyword">if</span>(data.state){
                $(<span class="string">"#test"</span>).html(data.msg);
            }<span class="keyword">else</span>{
                $(<span class="string">"#test"</span>).html(<span class="string">"验证未通过:"</span>+ data.msg);
            }
        },
        error:<span class="function"><span class="keyword">function</span>(<span class="params">jqXHR</span>)</span>{
             $(<span class="string">"#test"</span>).html(<span class="string">"发生错误:"</span>+jqXHR.status);
        }
    });
  });
});
</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
<span class="tag">&lt;/<span class="title">head</span>&gt;</span>
<span class="tag">&lt;<span class="title">body</span>&gt;</span>

<span class="tag">&lt;<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">button</span> <span class="attribute">id</span>=<span class="value">"getBtn"</span>&gt;</span>GET<span class="tag">&lt;/<span class="title">button</span>&gt;</span>
<span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"data"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">br</span>&gt;</span>
<span class="tag">&lt;<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">span</span>&gt;</span>用户名<span class="tag">&lt;/<span class="title">span</span>&gt;</span>
<span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">id</span>=<span class="value">"username"</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">span</span>&gt;</span>密　码<span class="tag">&lt;/<span class="title">span</span>&gt;</span> 
<span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">id</span>=<span class="value">"password"</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">button</span> <span class="attribute">id</span>=<span class="value">"postBtn"</span>&gt;</span>POST<span class="tag">&lt;/<span class="title">button</span>&gt;</span>
<span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"test"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span>

<span class="tag">&lt;/<span class="title">body</span>&gt;</span>
<span class="tag">&lt;/<span class="title">html</span>&gt;</span>
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>传统网页与服务器通信往往需要通过提交整个表单来实现，这样用户不得不每次在提交表单时重刷整个页面，带来很不好的用户体验，在这个背景下Ajax应运而生。<br>　　AJAX 即Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。Ajax不是新的编程语言，而是一种使用现有标准的新方法。Ajax能在不重新加载整个页面的情况下，与服务器进行数据交换，实现网页局部刷新。AJAX是与服务器交换数据并更新部分网页的艺术。更多Ajax的基本概念和语法可以参考 <a href="http://www.w3school.com.cn/ajax/index.asp">w3cschool的Ajax教程</a>。<br>]]>
    
    </summary>
    
      <category term="Ajax" scheme="http://wenzhuang.me/tags/Ajax/"/>
    
      <category term="JavaScript" scheme="http://wenzhuang.me/tags/JavaScript/"/>
    
      <category term="jQuery" scheme="http://wenzhuang.me/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android多线程之AsyncTask]]></title>
    <link href="http://wenzhuang.me/2015/12/14/Android%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B9%8BAsyncTask/"/>
    <id>http://wenzhuang.me/2015/12/14/Android多线程之AsyncTask/</id>
    <published>2015-12-14T13:30:00.000Z</published>
    <updated>2015-12-24T10:26:20.917Z</updated>
    <content type="html"><![CDATA[<p>对Android开发者来说，如何处理多线程问题是无法绕过的问题。每个Android开发者或多或少都遇到过ANR(Application Not Responding)异常，Android默认当UI线程阻塞超过20s时将会引发ANR异常。因此在处理耗时操作时应当将其放入新线程中，但是这样将面临一个问题，如何在新线程中更新UI组件呢?<br>　　Android提供如下几种方案：Handler、AsyncTask、Activity.runOnUiThread(Runnable)、View.post(Runnable)和View.postDelayed(Runnable,long)。其中Handler功能最强大，处理最灵活，实际上AsyncTask正是对Handler的封装，而后三种方式则略显繁琐。AsyncTask是Android开发非常常用的处理多线程问题的工具，使用起来也简单方便，适用于简单的异步处理。<br>　　<a id="more"></a><br>　　AsyncTask<params,progress,result>是一个抽象类，通常用于被继承，需要制定三个泛型参数。Params，启动任务执行时的输入参数的类型；Progress，后台执行任务时进度值的类型；Result，后台执行任务返回结果的类型。通常需要实现AsyncTask的如下方法：doInBackgroud(Params…)完成后台执行的任务，只有这个方法在新线程中运行。onProgressUpdate(Progress… values)，当在doInBackgroud()方法中调用publishProgress(Progress… values)时将触发该方法，用于显示任务执行的进度；onPreExecute()用于在执行后台任务前完成一些初始化的工作；onPostExecute(Result result):在完成后台任务后，doInBackgroud()方法会把返回值传给该方法，该方法一般用于更新UI。<br>　　使用AsyncTask时一般遵循如下规则:必须在UI线程中创建AsyncTask的实例并调用execute()方法；AsyncTask的方法由Android自动调用，执行顺序是onPreExecute()、doInBackgroud()、onProgressUpdate（）和onPostExecute()；每个AnyncTask只能被执行一次，多次调用将引发异常。<br>　　　　<img src="http://7xo4wg.com1.z0.glb.clouddn.com/Android_funny_logo.jpg" alt=""><br>　　<br>　　笔者使用AsyncTask实现了一个下载图片的示例app。源代码及app截图说明已上传至我的github的<a href="https://github.com/WenZhuang/AndroidDemos" target="_blank" rel="external">AndroidDemo仓库</a>。AndroidDemos是我在github新建的一个仓库，以后会上传更多的Android示例程序代码。<br>　　其中，ImageTask扩展了AsyncTask,我单独把ImageTask的源代码上传至<a href="https://github.com/WenZhuang/AndroidUtils/blob/master/ImageTask.java" target="_blank" rel="external">AndroidUtils仓库</a>。我的AndroidUtils仓库用于存放有用的Android工具类，ImageTask可作为下载图片的工具类。另外欢迎大家关注我的github,地址是<a href="https://github.com/WenZhuang" target="_blank" rel="external">https://github.com/WenZhuang</a>。<br>　　<br>　　ImageTask的源代码如下所示。使用ImageTask时，先要传入一个Context对象和一个ImageView对象作为ImageTask构造函数的参数，并且在调用execute()时需要传入图片的URL地址。在onPreExecute()方法中，实现了对进度条的设置和显示。因为没有使用水平进度条来显示进度，因此没有重写onProgressUpdate()方法。在doInBackground(String…)方法中，使用了HttpClient访问网络，关于HttpClient的使用方法请见我的博文<em><a href="http://wenzhuang.me/2015/11/28/%E4%BD%BF%E7%94%A8HttpCLient%E5%A4%84%E7%90%86HTTP%E8%AF%B7%E6%B1%82/">使用HttpClient处理HTTP请求</a></em>。使用BitmapFactory的decodeStream(InputStream)方法将网络输入流转化成Bitmap对象。在onPostExecute(Bitmap)中实现了将图片装载入ImageView，并且让进度条消失。</params,progress,result></p>
<pre><code><span class="preprocessor"><span class="keyword">import</span> android.app.ProgressDialog;</span>
<span class="preprocessor"><span class="keyword">import</span> android.content.Context;</span>
<span class="preprocessor"><span class="keyword">import</span> android.graphics.Bitmap;</span>
<span class="preprocessor"><span class="keyword">import</span> android.graphics.BitmapFactory;</span>
<span class="preprocessor"><span class="keyword">import</span> android.os.AsyncTask;</span>
<span class="preprocessor"><span class="keyword">import</span> android.widget.ImageView;</span>

<span class="preprocessor"><span class="keyword">import</span> org.apache.http.HttpResponse;</span>
<span class="preprocessor"><span class="keyword">import</span> org.apache.http.HttpStatus;</span>
<span class="preprocessor"><span class="keyword">import</span> org.apache.http.client.HttpClient;</span>
<span class="preprocessor"><span class="keyword">import</span> org.apache.http.client.methods.HttpGet;</span>
<span class="preprocessor"><span class="keyword">import</span> org.apache.http.impl.client.DefaultHttpClient;</span>

<span class="preprocessor"><span class="keyword">import</span> java.io.IOException;</span>

<span class="comment">/**
 * Created by JohnVenn on 2015/12/12.
 */</span>
<span class="class"><span class="keyword">class</span> <span class="title">ImageTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">String</span>,<span class="title">Void</span>,<span class="title">Bitmap</span>&gt; </span>{

    <span class="keyword">private</span> ProgressDialog dialog;
    <span class="keyword">private</span> Context context;
    <span class="keyword">private</span> ImageView imageView;
    ImageTask(Context context,ImageView imageView) {
        <span class="keyword">this</span>.context = context;
        <span class="keyword">this</span>.imageView = imageView;
    }

    @Override
    <span class="keyword">protected</span> Bitmap doInBackground(String... params) {
        Bitmap bitmap = <span class="literal">null</span>;
        HttpClient httpClient = <span class="keyword">new</span> DefaultHttpClient();
        HttpGet httpRequest = <span class="keyword">new</span> HttpGet(params[<span class="number">0</span>]);
        <span class="keyword">try</span> {
            HttpResponse httpResponse = httpClient.execute(httpRequest);
            <span class="keyword">if</span> (httpResponse.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                bitmap = BitmapFactory.decodeStream(httpResponse.getEntity().getContent());
            }
        } <span class="keyword">catch</span> (IOException e) {
            e.printStackTrace();
        }
        <span class="keyword">return</span> bitmap;
    }

    @Override
    <span class="keyword">protected</span> <span class="keyword">void</span> onPreExecute() {
        <span class="keyword">super</span>.onPreExecute();
        dialog = <span class="keyword">new</span> ProgressDialog(context);
        dialog.setTitle(<span class="string">"图片正在下载"</span>);
        dialog.setMessage(<span class="string">"正在为您玩命下载中......"</span>);
        dialog.setCancelable(<span class="literal">false</span>);
        dialog.show();
    }

    @Override
    <span class="keyword">protected</span> <span class="keyword">void</span> onPostExecute(Bitmap bitmap) {
        <span class="keyword">super</span>.onPostExecute(bitmap);
        imageView.setImageBitmap(bitmap);
        dialog.dismiss();
    }
}
</code></pre><p>　　<br>　　更多Android多线程的问题可以查看<a href="http://developer.android.com/guide/components/processes-and-threads.html" target="_blank" rel="external">AndroidDeveloper的官方指南</a>。了解更多AsyncTask，可以访问<a href="http://developer.android.com/reference/android/os/AsyncTask.html" target="_blank" rel="external">Android官方API</a>。（注：访问Android官方网站时，国内用户需要翻墙。无力吐槽。）</p>
<p><em>我的CSDN博客地址：<a href="http://blog.csdn.net/John_Venn" target="_blank" rel="external">http://blog.csdn.net/John_Venn</a></em></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>对Android开发者来说，如何处理多线程问题是无法绕过的问题。每个Android开发者或多或少都遇到过ANR(Application Not Responding)异常，Android默认当UI线程阻塞超过20s时将会引发ANR异常。因此在处理耗时操作时应当将其放入新线程中，但是这样将面临一个问题，如何在新线程中更新UI组件呢?<br>　　Android提供如下几种方案：Handler、AsyncTask、Activity.runOnUiThread(Runnable)、View.post(Runnable)和View.postDelayed(Runnable,long)。其中Handler功能最强大，处理最灵活，实际上AsyncTask正是对Handler的封装，而后三种方式则略显繁琐。AsyncTask是Android开发非常常用的处理多线程问题的工具，使用起来也简单方便，适用于简单的异步处理。<br>]]>
    
    </summary>
    
      <category term="Android" scheme="http://wenzhuang.me/tags/Android/"/>
    
      <category term="多线程" scheme="http://wenzhuang.me/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[摄影学习笔记之基本概念与法则]]></title>
    <link href="http://wenzhuang.me/2015/12/05/%E6%91%84%E5%BD%B1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E4%B8%8E%E6%B3%95%E5%88%99/"/>
    <id>http://wenzhuang.me/2015/12/05/摄影学习笔记之基本概念与法则/</id>
    <published>2015-12-05T14:53:24.000Z</published>
    <updated>2015-12-24T10:30:27.465Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>　摄影带给我们一些什么呢？是一口新鲜空气、一股强烈的现实味道，它给予事物的几乎是一种实体的表现，是确实的和真理的无法定义的符号，摄影完全更新了人和宇宙的关系。<br> ——布拉塞<br><a id="more"></a></p>
</blockquote>
<h1 id="一、入门">一、入门</h1><h2 id="1-摄影作品分类">1.摄影作品分类</h2><ul>
<li>按题材：风光摄影、人像摄影、纪实摄影、小品摄影</li>
<li>按颜色：彩色、单色（黑白系、褐色系、蓝色系）</li>
<li>按影调：亮调、中间调、暗调</li>
</ul>
<h2 id="2-镜头：">2.镜头：</h2><p>超广角镜头、中长焦镜头、大光圈定焦镜头</p>
<ul>
<li>拍摄角度接近180°：鱼眼镜头</li>
<li>等效焦距&lt;20mm 超广角镜头</li>
<li>20~35mm 广角镜头</li>
<li>40~60mm 标准镜头</li>
<li>75~150mm 中焦镜头</li>
<li>150~300mm 长焦镜头</li>
<li>大于300mm 超长焦镜头</li>
</ul>
<h2 id="3-单反的对焦体系">3.单反的对焦体系</h2><ul>
<li>手动、自动对焦</li>
<li>对焦点选择：单点模式、AF自动区域模式、动态区域模式</li>
<li>单张自动对焦、连续自动对焦</li>
</ul>
<h3 id="拍摄静止物体时的一般设置：">拍摄静止物体时的一般设置：</h3><ul>
<li>自动对焦（AF）</li>
<li>单张自动对焦</li>
<li>对焦点选择：中心单点模式</li>
<li>拍摄方式：单张拍摄</li>
<li>对焦锁定：半按快门</li>
</ul>
<h2 id="4-单反的测光体系">4.单反的测光体系</h2><ul>
<li>曝光方式：程序自动(P)、光圈优先（Av）。快门优先(Tv)、手动曝光(M)</li>
<li>测光范围：全局/评价测光、中央重点测光、点测光<h3 id="一般设置：">一般设置：</h3></li>
<li>程序自动（P）</li>
<li>全局测光/评价测光</li>
<li>曝光锁定：默认</li>
<li>曝光补偿：微调</li>
</ul>
<h1 id="二、基本概念">二、基本概念</h1><h2 id="1-焦距">1.焦距</h2><p>　焦距越小，角度越广；焦距越大，角度越窄</p>
<h2 id="2-等效焦距">2.等效焦距</h2><ul>
<li>全副相机：等效焦距=绝对焦距</li>
<li>非全副相机：等效焦距=绝对焦距*固定系数<br>尼康系数=1.5 佳能系数=1.6</li>
</ul>
<h2 id="3-对焦">3.对焦</h2><p>正确对焦后，所有过对焦点并且与相机感光器平行的平面都会足够清楚。</p>
<h2 id="4-快门速度">4.快门速度</h2><p>常见快门速度1/1000s、1/500s、1/250s、1/125s…….相邻两档是2倍的关系。<br>　　安全快门一般等于焦距的倒数，快门速度慢于安全快门容易产生抖动。<br>一级防抖镜头能使安全快门增高2档。手持相机拍摄快门速度尽量不要慢于1/30s。</p>
<h2 id="5-ISO值">5.ISO值</h2><p>ISO值是用来衡量感光器吸收光的能力的。ISO越高，感光速度越快。ISO常见的有ISO50、100、200、400……每项之间差一档，相邻两档是2倍的关系。ISO设置的比较高时，照片的噪点和颗粒将会明显增加。</p>
<h2 id="6-光圈值">6.光圈值</h2><p>常见光圈值f/1.4、f/2、f/2.8、f/4……相邻两档是1.4倍的关系。</p>
<h2 id="7-景深">7.景深</h2><p>影响景深的三个参数：<br>　- 光圈越大，景深越小；光圈越小，景深越大<br>　- 焦距越大，景深越小；焦距越小，景深越大<br>　- 对焦距离越近，景深越小；对焦距离越远，景深越大</p>
<h2 id="8-色温与白平衡">8.色温与白平衡</h2><ul>
<li>颜色偏蓝称为色温偏高（偏冷）</li>
<li>颜色偏黄称为色温偏低（偏暖）</li>
<li>白色的光称为色温正常（色温标准）</li>
</ul>
<h2 id="9-反差">9.反差</h2><p>低反差（偏灰）、中反差、高反差（黑白）</p>
<h1 id="三、构图">三、构图</h1><h2 id="1-简单构图法">1.简单构图法</h2><p>九宫格构图、三分构图、对角线（斜线）构图、三角形构图、平行或垂直构图</p>
<h2 id="2-进阶构图法">2.进阶构图法</h2><p>重复构图、画框构图、光影、色彩构图、动静构图、放射式构图、构造消极空间</p>
<h1 id="四、测光">四、测光</h1><h2 id="1-曝光的等效性（互易率）">1.曝光的等效性（互易率）</h2><p>影响曝光的三个参数：快门速度、ISO值、光圈值。<br>　　不同曝光组合的照片也可能达到相同的亮度，只要这些照片的各个曝光参数之间的差距相互抵消。</p>
<h2 id="2-曝光参数确定准则">2.曝光参数确定准则</h2><p>高ISO值拍摄的画面会比较粗糙，噪点和颗粒会增加；快门速度慢于安全快门，画面容易发生抖动；光圈值会影响景深。<br>　　一般的设置为：ISO100；拍摄人物或小品，最大光圈；拍摄范围大的风景f/16；拍摄范围不大的风景f/8；快门速度在光圈优先模式下由相机给出。</p>
<h2 id="3-阳光16法则">3.阳光16法则</h2><p>从日出2~3小时后到日落2~3小时前，在明亮的阳光正面的物体适度曝光值为：光圈f/16，快门速度等于ISO 的倒数，及其所有与其等效的曝光组合。<br>如果不是晴天：薄云f/11，多云f/8，厚云（阴天）f/5.6，乌云f/4。</p>
<h2 id="4-测光的四个法则">4.测光的四个法则</h2><h3 id="第一法则：">第一法则：</h3><p>测光某一区域得到的曝光组合，就是使这一区域变成中等色调的曝光组合。每个颜色都唯一对应了一个曝补偿的值，如果想把一个颜色测准，只需设定正确的曝光补偿值即可。（白加黑减）</p>
<ul>
<li>白色 +2.0</li>
<li>粉红、新绿、浅蓝、黄 +1.0~+1.3</li>
<li>标准红、绿、蓝、中灰 0</li>
<li>深红、深绿、深蓝、亮紫  -1.3~-1.7</li>
<li>褐红、墨绿、暗蓝、紫色 -2.0~-2.3</li>
<li>黑色 -3.0<h3 id="第二法则：">第二法则：</h3>对于受光情况相同的不同颜色，只要将其中任意一种颜色拍准，则同一张照片中的其他颜色也会按照自身的颜色显现。<h3 id="第三法则：">第三法则：</h3>对于受光不同的物体、实际之中比较亮的在画面中一定比实际之中偏暗的要亮。<h3 id="第四法则：">第四法则：</h3></li>
<li>如果画面中最强光源下存在白色物体，只需对其点测光并设置曝光补偿为+2.0；</li>
<li>如果画面中最强光源下不存在白色物体，只需点测相对较亮处并设置相应的曝光补偿。</li>
</ul>
<h2 id="5-夜景曝光法则">5.夜景曝光法则</h2><p>在夜晚为了拍摄城市灯光效果，适用的拍摄参数为ISO100，光圈f/16，快门30s</p>
<h1 id="五、拍摄技巧">五、拍摄技巧</h1><h2 id="1-风光摄影">1.风光摄影</h2><ul>
<li>光线角度：顺光、侧光、逆光</li>
<li>焦距使用：超广角、中长焦、标准镜头</li>
<li>超焦距：当相机在这个对焦距离时，拍摄的照片在当前的焦距和这一档光圈下有最大的景深范围。</li>
<li>“三分之一处对焦法“：将焦点选择在画面下方三分之一处。</li>
</ul>
<h2 id="2-滤镜">2.滤镜</h2><ul>
<li>UV镜：吸收紫外线</li>
<li>天光镜：吸收紫外线、小部分紫光、蓝光<h3 id="风光摄影必备三大滤镜：">风光摄影必备三大滤镜：</h3></li>
<li>偏光镜（偏振镜）：过滤反射光线，增加成像反差<br>圆偏振镜（CPL）适合新式自动对焦相机<br>线偏正镜（LPL）适合老式手动对焦</li>
<li>中灰密度镜（中性灰度镜、灰镜、减光镜，简称ND镜），压暗进光光线，防止过曝。</li>
<li>减光镜：下半部分为透明，上半部分逐渐过渡到其他色调，渐变灰、渐变红、渐变蓝等。<br>灰渐变镜（GND镜）：一半透光、一半稍有阻光，主要用来平衡画面上下或者左右两部分的反差。</li>
</ul>
<h2 id="3-人像外拍">3.人像外拍</h2><h3 id="基础设置：">基础设置：</h3><ul>
<li>测光：全局测光</li>
<li>曝光方式：光圈优先，将光圈设置为最大较大</li>
<li>ISO设置到最小，快门速度由相机测定</li>
<li>根据照片亮度使用曝光补偿进行微调</li>
</ul>
<p><img src="http://7xo4wg.com1.z0.glb.clouddn.com/photography_girl.jpg" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>　摄影带给我们一些什么呢？是一口新鲜空气、一股强烈的现实味道，它给予事物的几乎是一种实体的表现，是确实的和真理的无法定义的符号，摄影完全更新了人和宇宙的关系。<br> ——布拉塞<br>]]>
    
    </summary>
    
      <category term="摄影" scheme="http://wenzhuang.me/tags/%E6%91%84%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用HttpClient处理HTTP请求]]></title>
    <link href="http://wenzhuang.me/2015/11/28/%E4%BD%BF%E7%94%A8HttpCLient%E5%A4%84%E7%90%86HTTP%E8%AF%B7%E6%B1%82/"/>
    <id>http://wenzhuang.me/2015/11/28/使用HttpCLient处理HTTP请求/</id>
    <published>2015-11-28T14:47:25.000Z</published>
    <updated>2015-12-24T10:37:06.714Z</updated>
    <content type="html"><![CDATA[<p>无论是B/S还是C/S，只要是涉及客户端与服务器的通信，那么如何处理HTTP请求就是无法避免的问题。<br>　　Java封装了HttpURLConnection提供给Java程序员做HTTP网络请求，然而使用HttpURLConnection做HTTP请求比较繁琐。如何简单快速地实现HTTP请求呢？Apache提供了一个专门用于处理HTTP请求的库HttpClient，使用起来方便快捷。<br>　　<a id="more"></a><br>　　Java开发者使用HttpClient需要先到<a href="http://hc.apache.org/httpclient-3.x/" target="_blank" rel="external">ApacheHttpClient官网</a>下载相关的jar包。对于Android开发者来说，HttpClient几乎是最常用的用于处理HTTP请求的工具，在API21（Android4.4）及更早版本的SDK中，HttpClient被集成在SDK中，方便Android开发者处理HTTP请求。然而在API22及更新的Android SDK中HttpClient已经被去掉，然而开发者依然可以使用导入外部包的方式继续使用HttpClient进行开发。如果你是AndroidStudio用户，你还可以gradle进行包依赖管理,在build.gradle中加入如下声明：</p>
<pre><code>　<span class="title">android</span> {
    <span class="title">useLibrary</span> <span class="string">'org.apache.http.legacy'</span>
}
</code></pre><p>Http请求最常用的是Get和Post请求，对于HTTP协议及其方法此处不再赘述。对于Post和Get请求，HttpClient都封装了相应的类和方法方便开发者的使用。<br>　　笔者使用HttpClient写了一个工具类HttpUtils，包含两个静态方法doGet(String)和doPost(String,Map)分别实现了Get请求和Post请求。源代码已上传至Github的<a href="https://github.com/WenZhuang/AndroidUtils/blob/master/HttpUtils.java" target="_blank" rel="external">AndroidUtils仓库</a>。<br>　　<img src="http://7xo4wg.com1.z0.glb.clouddn.com/Apache_logo.jpg" alt=""><br>　　以下是doGet方法的源代码，方法调用者需要传入一个目标URL地址作为参数，响应成功时返回响应字符串，失败时返回相应的响应码（如404）。首先需要创建一个HttpClient对象和一个HttpGet对象，给HttpGet设置请求参数（如设置响应超时时间等）这部分并非是必须的。HttpClient对象只需调用execute(HttpGet)方法就可以获得一个HttpResponse对象，该对象包含从服务器获取的HTTP响应。调用getEntity方法获取Http响应体。</p>
<pre><code><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">doGet</span>(<span class="params">String url</span>)</span>{
        String responseStr = <span class="string">"Fail"</span>;
        <span class="keyword">try</span> {
            HttpClient httpClient = <span class="keyword">new</span> DefaultHttpClient();
            HttpGet httpRequest = <span class="keyword">new</span> HttpGet(url);

            <span class="comment">//设置请求参数</span>
            HttpParams <span class="keyword">params</span> = <span class="keyword">new</span> BasicHttpParams();
            <span class="comment">// 从连接池中获取连接的超时时间</span>
            ConnManagerParams.setTimeout(<span class="keyword">params</span>, <span class="number">1000</span>);
            <span class="comment">// 通过网络与服务器建立连接的超时时间</span>
            HttpConnectionParams.setConnectionTimeout(<span class="keyword">params</span>, <span class="number">3000</span>);
            <span class="comment">// 读响应数据的超时时间</span>
            HttpConnectionParams.setSoTimeout(<span class="keyword">params</span>, <span class="number">5000</span>);
            httpRequest.setParams(<span class="keyword">params</span>);


            HttpResponse httpResponse = httpClient.execute(httpRequest);
            final <span class="keyword">int</span> ret = httpResponse.getStatusLine().getStatusCode();
            <span class="keyword">if</span> (ret == HttpStatus.SC_OK) {
                responseStr = EntityUtils.toString(httpResponse.getEntity(), HTTP.UTF_8);
            } <span class="keyword">else</span> {
                responseStr = String.valueOf(ret);
            }

        } <span class="keyword">catch</span> (UnsupportedEncodingException e) {
            <span class="comment">// TODO Auto-generated catch block</span>
            e.printStackTrace();
        } <span class="keyword">catch</span> (ClientProtocolException e) {
            <span class="comment">// TODO Auto-generated catch block</span>
            e.printStackTrace();
        } <span class="keyword">catch</span> (IOException e) {
            <span class="comment">// TODO Auto-generated catch block</span>
            e.printStackTrace();
        }

        <span class="keyword">return</span> responseStr;
    }
</code></pre><p>　　<br>　　以下是doPost方法的源代码。调用者需要传入一个目标URL地址和一个Map作为参数。响应成功时返回响应字符串，失败时返回相应的响应码。调用者在调用doPost前需要将请求参数以键值对的方式存入Map中，再将Map作为doPost的参数。首先需要创建一个HttpClient对象和一个HttpPost对象，依次取出Map里的参数存入包含BasicNameValuePair的list中。调用HttpPost的setEntity的方法装入请求体。HttpClient对象调用execute(HttpPost)方法就可以获得一个HttpResponse对象,处理方式与doGet方法相同。
　　</p>
<pre><code> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">String</span> doPost(<span class="keyword">String</span> url, Map&lt;<span class="keyword">String</span>,<span class="keyword">String</span>&gt; <span class="built_in">map</span>) {
    <span class="keyword">String</span> responseStr = <span class="string">"Fail"</span>;
    <span class="keyword">try</span> {
        HttpPost httpRequest = <span class="keyword">new</span> HttpPost(url);

        <span class="comment">//设置请求参数</span>
        HttpParams params = <span class="keyword">new</span> BasicHttpParams();
        <span class="comment">// 从连接池中获取连接的超时时间</span>
        ConnManagerParams.setTimeout(params, <span class="number">1000</span>);
        <span class="comment">// 通过网络与服务器建立连接的超时时间</span>
        HttpConnectionParams.setConnectionTimeout(params, <span class="number">3000</span>);
        <span class="comment">// 读响应数据的超时时间</span>
        HttpConnectionParams.setSoTimeout(params, <span class="number">5000</span>);
        httpRequest.setParams(params);

        <span class="comment">// 下面开始跟服务器传递数据，使用BasicNameValuePair</span>
        List&lt;BasicNameValuePair&gt; paramsList = <span class="keyword">new</span> ArrayList&lt;&gt;();
        <span class="keyword">for</span>(<span class="keyword">String</span> <span class="variable">key</span> : <span class="built_in">map</span>.keySet()){
            paramsList.<span class="built_in">add</span>(<span class="keyword">new</span> BasicNameValuePair(<span class="variable">key</span> , <span class="built_in">map</span>.<span class="built_in">get</span>(<span class="variable">key</span>)));
        }

        httpRequest.setEntity(<span class="keyword">new</span> UrlEncodedFormEntity(
                paramsList, HTTP.UTF_8));

        HttpClient httpClient = <span class="keyword">new</span> DefaultHttpClient();
        HttpResponse httpResponse = httpClient.execute(httpRequest);
        <span class="keyword">final</span> <span class="built_in">int</span> ret = httpResponse.getStatusLine().getStatusCode();
        <span class="keyword">if</span> (ret == HttpStatus.SC_OK) {
             responseStr = EntityUtils.toString(httpResponse.getEntity(),HTTP.UTF_8);
        } <span class="keyword">else</span> {
            responseStr = <span class="keyword">String</span>.valueOf(ret);
        }

    } <span class="keyword">catch</span> (UnsupportedEncodingException e) {
        <span class="comment">// TODO Auto-generated catch block</span>
        e.printStackTrace();
    } <span class="keyword">catch</span> (ClientProtocolException e) {
        <span class="comment">// TODO Auto-generated catch block</span>
        e.printStackTrace();
    } <span class="keyword">catch</span> (IOException e) {
        <span class="comment">// TODO Auto-generated catch block</span>
        e.printStackTrace();
    }

    <span class="keyword">return</span> responseStr;
}
</code></pre><p>参考链接：　<a href="http://developer.android.com/about/versions/marshmallow/android-6.0-changes.html#behavior-apache-http-client" target="_blank" rel="external">http://developer.android.com/about/versions/marshmallow/android-6.0-changes.html#behavior-apache-http-client</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>无论是B/S还是C/S，只要是涉及客户端与服务器的通信，那么如何处理HTTP请求就是无法避免的问题。<br>　　Java封装了HttpURLConnection提供给Java程序员做HTTP网络请求，然而使用HttpURLConnection做HTTP请求比较繁琐。如何简单快速地实现HTTP请求呢？Apache提供了一个专门用于处理HTTP请求的库HttpClient，使用起来方便快捷。<br>]]>
    
    </summary>
    
      <category term="Android" scheme="http://wenzhuang.me/tags/Android/"/>
    
      <category term="HTTP" scheme="http://wenzhuang.me/tags/HTTP/"/>
    
      <category term="Java" scheme="http://wenzhuang.me/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Život je jinde]]></title>
    <link href="http://wenzhuang.me/2015/11/22/Zivot-je-jinde/"/>
    <id>http://wenzhuang.me/2015/11/22/Zivot-je-jinde/</id>
    <published>2015-11-22T09:59:06.000Z</published>
    <updated>2015-11-22T13:02:29.081Z</updated>
    <content type="html"><![CDATA[<p><em>原文：</em><a href="http://wenzhuang.me/2015/11/21/%E7%94%9F%E6%B4%BB%E5%9C%A8%E5%88%AB%E5%A4%84/"><em>《生活在别处》</em></a></p>
<blockquote>
<p> 我还年轻，我渴望上路。<br>　 ——杰克·凯鲁亚克<br>　 《在路上》</p>
</blockquote>
<p>法国诗人波兰说：“生活在别处。”米兰·昆德拉将其作为书名后，这句话开始变得家喻户晓。其中的“别处”意义让人迷醉，“生活在别处”成为旅行者、追求自由的文艺青年们生活的标杆。年轻人们背上背包，迷上酒精和摇滚，口中吟唱“垮掉的一代”写下的句子，在大漠的公路上摇摇晃晃，为的是逃离现实生活的束缚，卸下包裹和伪装。没有什么能困住自己，如果你决心逃离。<br>　　这些年来，我已去过许多地方，它们跟我去过的其它地方一样都是“别处”。而这些许许多多的“别处”，总是容易让你想起你自己现在生活的地方，不是因为似曾相识，而是因为完全相异。这也是为什么我总是想到北京，想到我自己的生活。我想我到底是被现实的什么困住了。到了“别处”，脱离原来生活的模式，你才能聆听自己内心的呐喊，开始明白些什么。<br>　　<img src="http://7xo4wg.com1.z0.glb.clouddn.com/on-the-road2.jpg" alt=""><br>　　保罗·柯艾略的《牧羊少年奇幻之旅》，有牧羊少年圣地亚哥与自己的心对话的情节，我起初很不解，现在终于明白了，人确实是可以与自己对话，听到自己的声音的。而在熟悉的地方，在自己的角色中，很难唤醒真实的自己。圣地亚哥到最后也没有找到宝藏，而且还被揍了一顿，但是他已经明白，真正的宝藏是什么。<br>　　前几天看了一部电影《楚门的世界》，讲述了这样一个故事，楚门从小生长在巨大的片场中，生活都是导演好的一场戏，而他毫不知情，他本可以在温柔的襁褓中过完一生，但为了自由和爱，他找到了通往现实世界的大门。其实每个都是楚门。人的局限性太大了，容易被自己困住，或者说被自己在生活中扮演的角色困住。人的局限性是人作茧自缚的根源，当你去了“别处”，你会脱离现实关系网的束缚，想到自己如果生活和成长在这个城市会是怎样的，环境到底对人的影响多大。于是你才开始重新审视自己的生活，想到重新构建自己的生活，想到独立，想到回到熟悉的地方后如何清理或隔绝周围的噪音。生活是个迷局，你不跳出来又如何看的清。<br>　　<img src="http://7xo4wg.com1.z0.glb.clouddn.com/on-the-road1.jpg" alt=""><br>　　有不少朋友对我说，他们很向往来北京。我想，人总是这样，站在自己的位置，向往他人的生活，或者说人总是想“生活在别处”。尽管“别处”的意义对每个人的意义不同，因为你的“别处”，可能正是我的“此处”。正如钱钟书《围城》里所说“城外的人想冲进去,城里的人想逃出来”，我们只要做到不被自己困在围城里。失败并不能让自己成长，让自己成长的是失败后的思考和改变，阿Q式的自我欺骗只会让自己再次深陷泥淖；时间也不能治愈什么，如果不突破局限，沟壑也难以填平。既然我们不能像史铁生那样有“我不等于史铁生，史铁生只是我的一个躯体”这样灵魂高度的超脱，那我们就应该去“别处”看看，这样才能重新审视自己的困局。旅行和思考的意义在于成长，就是一个逐渐构筑和突破围城的过程。<br>　　不管怎样，我希望每一次的出行每一次的访友，都能让自己有那么一点成长。它至少让我明白，我现在的生活是多么的局限。世界这么大，如果我们不去看外面的世界，那我们就是被现实困住的楚门。而我希望能成为寻找宝藏的圣地亚哥。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><em>原文：</em><a href="http://wenzhuang.me/2015/11/21/%E7%94%9F%E6%B4%BB%E5%9C%A8%E5%88%AB%E5%A4%84/"><em>《生活在别处》</em></a></p>
<blockquote>]]>
    </summary>
    
      <category term="随笔" scheme="http://wenzhuang.me/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[生活在别处]]></title>
    <link href="http://wenzhuang.me/2015/11/21/%E7%94%9F%E6%B4%BB%E5%9C%A8%E5%88%AB%E5%A4%84/"/>
    <id>http://wenzhuang.me/2015/11/21/生活在别处/</id>
    <published>2015-11-21T08:59:27.000Z</published>
    <updated>2015-11-22T13:03:02.628Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p> 我还年轻，我渴望上路。<br>　 ——杰克·凯鲁亚克<br>　 《在路上》</p>
</blockquote>
<p>法国诗人波兰说：“生活在别处。”米兰·昆德拉将其作为书名后，这句话开始变得家喻户晓。其中的“别处”意义让人迷醉，“生活在别处”成为旅行者、追求自由的文艺青年们生活的标杆。年轻人们背上背包，迷上酒精和摇滚，口中吟唱“垮掉的一代”写下的句子，在大漠的公路上摇摇晃晃，为的是逃离现实生活的束缚，卸下包裹和伪装。没有什么能困住自己，如果你决心逃离。<br>　　这些年来，我已去过许多地方，它们跟我去过的其它地方一样都是“别处”。而这些许许多多的“别处”，总是容易让你想起你自己现在生活的地方，不是因为似曾相识，而是因为完全相异。这也是为什么我总是想到北京，想到我自己的生活。我想我到底是被现实的什么困住了。到了“别处”，脱离原来生活的模式，你才能聆听自己内心的呐喊，开始明白些什么。<br>　　<img src="http://7xo4wg.com1.z0.glb.clouddn.com/on-the-road2.jpg" alt=""><br>　　保罗·柯艾略的《牧羊少年奇幻之旅》，有牧羊少年圣地亚哥与自己的心对话的情节，我起初很不解，现在终于明白了，人确实是可以与自己对话，听到自己的声音的。而在熟悉的地方，在自己的角色中，很难唤醒真实的自己。圣地亚哥到最后也没有找到宝藏，而且还被揍了一顿，但是他已经明白，真正的宝藏是什么。<br>　　前几天看了一部电影《楚门的世界》，讲述了这样一个故事，楚门从小生长在巨大的片场中，生活都是导演好的一场戏，而他毫不知情，他本可以在温柔的襁褓中过完一生，但为了自由和爱，他找到了通往现实世界的大门。其实每个都是楚门。人的局限性太大了，容易被自己困住，或者说被自己在生活中扮演的角色困住。人的局限性是人作茧自缚的根源，当你去了“别处”，你会脱离现实关系网的束缚，想到自己如果生活和成长在这个城市会是怎样的，环境到底对人的影响多大。于是你才开始重新审视自己的生活，想到重新构建自己的生活，想到独立，想到回到熟悉的地方后如何清理或隔绝周围的噪音。生活是个迷局，你不跳出来又如何看的清。<br>　　<img src="http://7xo4wg.com1.z0.glb.clouddn.com/on-the-road1.jpg" alt=""><br>　　有不少朋友对我说，他们很向往来北京。我想，人总是这样，站在自己的位置，向往他人的生活，或者说人总是想“生活在别处”。尽管“别处”的意义对每个人的意义不同，因为你的“别处”，可能正是我的“此处”。正如钱钟书《围城》里所说“城外的人想冲进去,城里的人想逃出来”，我们只要做到不被自己困在围城里。失败并不能让自己成长，让自己成长的是失败后的思考和改变，阿Q式的自我欺骗只会让自己再次深陷泥淖；时间也不能治愈什么，如果不突破局限，沟壑也难以填平。既然我们不能像史铁生那样有“我不等于史铁生，史铁生只是我的一个躯体”这样灵魂高度的超脱，那我们就应该去“别处”看看，这样才能重新审视自己的困局。旅行和思考的意义在于成长，就是一个逐渐构筑和突破围城的过程。<br>　　不管怎样，我希望每一次的出行每一次的访友，都能让自己有那么一点成长。它至少让我明白，我现在的生活是多么的局限。世界这么大，如果我们不去看外面的世界，那我们就是被现实困住的楚门。而我希望能成为寻找宝藏的圣地亚哥。</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p> 我还年轻，我渴望上路。<br>　 ——杰克·凯鲁亚克<br>　 《在路上》</p>
</blockquote>
<p>法国诗人波兰说：“生活在别处。”米兰·昆德拉将其作为书名后，这句话开始变得家喻户晓。其中的“别处”意义让人迷醉，“生活在别处”成]]>
    </summary>
    
      <category term="随笔" scheme="http://wenzhuang.me/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[苏州印象]]></title>
    <link href="http://wenzhuang.me/2015/11/14/%E8%8B%8F%E5%B7%9E%E5%8D%B0%E8%B1%A1/"/>
    <id>http://wenzhuang.me/2015/11/14/苏州印象/</id>
    <published>2015-11-14T12:38:09.000Z</published>
    <updated>2015-11-14T15:40:19.332Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p><em>那时我们有梦，关于文学，关于爱情，关于穿越世界的旅行。如今我们深夜饮酒，杯子碰到一起，都是梦破碎的声音。<br>　　　　　　　　　　　　　　　　　　　——北岛《波兰来客》</em></p>
</blockquote>
<p>谈起苏州，你总是不能用苏州之旅或者苏州游记这样的词汇来形容她，你想到的是文艺清新、烟雨蒙蒙，你总是想到白墙黑瓦的老房子，你想到了护城河边的吴侬软语，你想到了悠长悠长而又寂寥的雨巷，对面走来一位撑着油纸伞结着丁香花般仇怨的姑娘。你想到的是透过烟雨蒙蒙的小巷穿过记忆回廊的苏州印象。模糊又清晰。苏州就像一块透明的玻璃，而回忆就像是轻轻呵了一口气，她就变得模糊飘渺。其实，北京也是一块玻璃，不过是块毛玻璃，易碎、尖锐、忧伤，往玻璃窗户外面一看，PM2.5又爆表了。<br>　　      　　　<img src="http://7xo4wg.com1.z0.glb.clouddn.com/%E6%B1%9F%E5%8D%97%E6%B0%B4%E4%B9%A1.jpg" alt="江南水乡"><br>　　苏州是个文艺的城市。不过苏州的文艺是小清新的、透明的、带着淡淡忧伤的。平江路那边，挨着一条河，河的另一边是白墙黑瓦的民居，另一边就是平江路了。林立着卖各种饰品的小店，书店里弥漫着咖啡的香气。苏州的老奶奶们，头上带着花，却毫无违和感，你可以隐隐看到她们的年代。吴侬软语温柔如同梦呓。他们的家住在河边，江南的水让她们变得温柔。不幸的是，我没见过苏州烟雨蒙蒙的样子，我去的几天她一直在灿烂的笑，阳光满面，直到我离开的那天她才开始显现愁容，变成阴天。<br>　　<img src="http://7xo4wg.com1.z0.glb.clouddn.com/%E8%80%81%E8%8B%8F%E5%B7%9E.jpg" alt="老苏州"><br>　　其实北京也是座文艺的城市，不过北京的文艺是破碎的、忧伤的、飘摇不定的。在后海酒吧街，在地下通道，在地铁拥挤的人群中，你总是能看到那些北漂的年轻人，他们背着一把破木吉他，唱着自己的愤怒和哀伤。那些撕哑的声音飘在寒风中，听起来，有时候像是梦的声音，有时候像是梦破碎的声音。<br>　　<img src="http://7xo4wg.com1.z0.glb.clouddn.com/%E5%B9%B3%E6%B1%9F%E8%B7%AF.jpg" alt="平江路夜景"><br>　　叶圣陶在《苏州园林》里说到：“倘若要我说说总的印象，我觉得苏州园林是我国各地园林的标本，各地园林或多或少都受到苏州园林的影响。因此，谁如果要鉴赏我国的园林，苏州园林就不该错过。”很显然苏州是一座园林城市。园林就是这座城市的文化名片。我自己去过的园林并不多，只去了网师园和狮子林。但这并不影响我观赏园林，因为这座城市到处充满了园林的影子，或者说这座城市本身就是一座巨大的园林，各处的建筑都仿造园林的样式。例如苏州大学，学校里的建筑风格就是典型的苏州园林，虎丘公园各处的建筑也都是园林的样式，甚至连公交站都设计成凉亭或屋檐的模样。老苏州的建筑保护非常完好，政府规定不能有超过六层的建筑。在这座城市应该是什么样的定位上，苏州非常清楚。<br>　　<img src="http://7xo4wg.com1.z0.glb.clouddn.com/%E7%BD%91%E5%B8%88%E5%9B%AD.jpg" alt="网师园"><br>　　北京有些地方的建筑保护也还算完好，有一次去琉璃厂那边，进到胡同里，误以为进入另一个世界，里面的居民生活非常原生态，与外部的现代化快节奏生活隔离开来，很难想象北京还有这样一块地方。不过北京对自己的定位比较尴尬，之前想把鸟巢打造成新的地标，结果没能成功。鸟巢这样的建筑虽然很大气，但是给不了人们多少文化寄托，所以北京的地标依旧是故宫、天安门。<br>　　<img src="http://7xo4wg.com1.z0.glb.clouddn.com/%E7%AA%97%E8%8A%B1.jpg" alt="窗花"><br>　　虽然我不懂园林艺术，但是作为北京林业大学的学生，来到园林的圣地，还是感觉些许圣神。论及我最喜欢的园林，要数狮子林了。其中的假山饶有趣味，狮子林并不大，但是其中的山洞却又感觉增加了无穷无尽的空间。从一端进洞，你绝不会猜到出口在何方，不得不感叹工匠的鬼才。秋天狮子林还可以看到不少学生在那里写生，我心中暗自想如果北林园林院如果是在苏州，也许更加合适。<br>     <img src="http://7xo4wg.com1.z0.glb.clouddn.com/%E8%97%A4%E8%94%93.jpg" alt="藤蔓">　<br> 　　其实北京也是有园林的，跟苏州的私家园林不同，北京的是皇家园林。世界上最大的园林就是圆明园了，如今已是断壁残垣，最著名的大水法残壁被铁链锁住，供远道而来的游客们观瞻合影。镜头前人们举着剪刀手嘟着嘴卖着萌喊着“茄子”，咔嚓，身后是一百五十年前熊熊燃烧的大火。<br>　　<img src="http://7xo4wg.com1.z0.glb.clouddn.com/%E9%BB%84%E6%98%8F.jpg" alt="黄昏"></p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p><em>那时我们有梦，关于文学，关于爱情，关于穿越世界的旅行。如今我们深夜饮酒，杯子碰到一起，都是梦破碎的声音。<br>　　　　　　　　　　　　　　　　　　　——北岛《波兰来客》</em></p>
</blockquote>
<p>谈起苏州，你总是]]>
    </summary>
    
      <category term="游记" scheme="http://wenzhuang.me/tags/%E6%B8%B8%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://wenzhuang.me/2015/11/07/hello-world/"/>
    <id>http://wenzhuang.me/2015/11/07/hello-world/</id>
    <published>2015-11-07T15:55:20.877Z</published>
    <updated>2015-11-06T13:12:51.986Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io]]>
    </summary>
    
  </entry>
  
</feed>

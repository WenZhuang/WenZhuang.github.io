<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[John's Blog]]></title>
  <subtitle><![CDATA[Beautiful Life]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://wenzhuang.me/"/>
  <updated>2017-05-13T12:27:22.423Z</updated>
  <id>http://wenzhuang.me/</id>
  
  <author>
    <name><![CDATA[John Venn]]></name>
    <email><![CDATA[wenzhuang2012@gmail.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[背景音乐]]></title>
    <link href="http://wenzhuang.me/2100/12/25/%E8%83%8C%E6%99%AF%E9%9F%B3%E4%B9%90/"/>
    <id>http://wenzhuang.me/2100/12/25/背景音乐/</id>
    <published>2100-12-25T07:25:19.000Z</published>
    <updated>2017-05-13T12:27:22.423Z</updated>
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=108242&auto=1&height=66"></iframe>]]></content>
    <summary type="html">
    <![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[2017暑期实习面经]]></title>
    <link href="http://wenzhuang.me/2017/05/17/2017%E6%9A%91%E6%9C%9F%E5%AE%9E%E4%B9%A0%E9%9D%A2%E7%BB%8F/"/>
    <id>http://wenzhuang.me/2017/05/17/2017暑期实习面经/</id>
    <published>2017-05-17T11:59:33.000Z</published>
    <updated>2017-06-09T10:33:06.868Z</updated>
    <content type="html"><![CDATA[<p>漫长的暑期实习面试结束了，从3月下旬到5月上旬，笔者面试了十余家公司，面试过程也多有波折。最后笔者还是如愿拿到了阿里巴巴淘宝技术部的实习Offer，此外还收到了小米的实习Offer。最终选择了阿里巴巴，梦想成真。 　　<br>　　尘埃落定，笔者决定将面试经验给大家分享一下。笔者面试方向以Java开发为主，内容包括Java开发基础、数据结构与算法、Linux与数据库等内容。非Java开发的同学也能从中得到启发。希望能给尚未找到暑期实习的同学提供一些帮助，给2017正式校招面试提供一些参考和借鉴<br><a id="more"></a></p>
<h1 id="面试题分类"><strong>面试题分类</strong></h1><p>Java开发面试中JVM和多线程几乎是必问的两个点，笔者推荐两本书，<a href="https://book.douban.com/subject/24722612/" target="_blank" rel="external">《深入理解Java虚拟机》</a>和<a href="https://book.douban.com/subject/10484692/" target="_blank" rel="external">《Java并发编程实战》</a>。由于很多公司的面试题存在大量重复，这里先整理了出现频率比较高的面试题。然后再逐一介绍各个公司的面试算法题。</p>
<h1 id="JVM相关">JVM相关</h1><ol>
<li>JVM内存分配</li>
<li>JVM垃圾回收机制、常用算法</li>
<li>为什么有两个survivor？<br>（两个survivor来回复制。永远有一个survivor space是空的，另一个非空的survivor space无碎片）</li>
<li>虚拟机什么时候触发GC<br>（Eden区满，触发Young GC；young GC的平均晋升大小比目前old gen剩余的空间大，则不会触发young GC而是转为触发full GC）</li>
<li>垃圾回收器中的Stop the World </li>
<li>类加载<br>（加载 –&gt; 连接 (验证 –&gt; 准备 –&gt;　解析) –&gt; 初始化 –&gt; 使用 –&gt; 卸载）</li>
<li>Java类初始化的过程</li>
</ol>
<h1 id="多线程相关">多线程相关</h1><ol>
<li>使用多线程会造成哪些问题？什么是死锁？</li>
<li>HashMap实现如何线程安全，ConcurrentHashMap实现原理?（分段锁、voilate）</li>
<li>NIO与IO的区别以及适用场景</li>
<li>volitale的作用（可见性、禁止指令重排序）volitale自增时能否保证线程安全（不能，不具备原子性）</li>
<li>了解CAS吗（CompareAndSwap，实现轻量级锁，非阻塞同步）</li>
<li>多线程的锁机制</li>
<li>读写锁与ReetrantLock</li>
<li>线程池 （newFixedThreadPool固定 newCachedThreadPool可按需变化<br>newSingleThreadPool串行）、可变线程池的参数都有哪些</li>
</ol>
<h1 id="容器、数据结构、算法">容器、数据结构、算法</h1><ol>
<li>HashTable和HashMap有什么区别？</li>
<li>HashMap的实现原理？（拉链法、散列函数）</li>
<li>hashcode的计算方式</li>
<li>说一说再哈希</li>
<li>HashMap和TreeMap的底层实现原理，插入一个数的时间复杂度</li>
<li>红黑树实现原理？</li>
<li>ArrayList和LinkedList的区别和适用场景</li>
<li>怎样用栈实现队列</li>
<li>按排序策略分 排序分为：插入、选择、交换、归并和分配排序</li>
<li>简述快速排序的原理，时间复杂度及原因</li>
</ol>
<h1 id="数据库、MySQL">数据库、MySQL</h1><ol>
<li>了解第一、第二范式吗？</li>
<li>什么是事务？什么是脏读？InnoDB默认的事务隔离级别<br>(可重复读)</li>
<li>MySQL的架构，MySQL如何分表分库</li>
<li>MySQL适用场景，数据库引擎，各存储引擎存储的数据量</li>
<li>InnoDB和MyISAM各自的优点</li>
<li>MyISAM里有几个文件<br>（每个MyISAM在磁盘上存储成三个文件，每一个文件的名字均以表的名字开始，扩展名指出文件类型。 .frm文件存储表定义； ·MYD<br>(MYData)文件存储表的数据； .MYI (MYIndex)文件存储表的索引。）</li>
<li>MySQL怎样分布式存储数据</li>
<li>MySQL有哪些索引？使用like匹配时用到了哪些索引?</li>
<li>为什么要用主健索引，索引是使用什么数据结构实现的（B树）</li>
<li>如果MySQL数据库由于连接数过多而崩溃，这时该怎么做（从数据库的角度考虑）</li>
<li>连接池 （C3P0、DBPC、Proxool、 DBCP   java常用的四种数据库连接池 ）</li>
<li>SQL中join的用法</li>
</ol>
<h1 id="操作系统、Linux、计算机网络">操作系统、Linux、计算机网络</h1><ol>
<li>进程间有哪些通信方式，进程的状态转换，进程与线程的区别</li>
<li>虚拟内存与物理内存，进程使用的是虚拟内存还是物理内存</li>
<li>awk用法</li>
<li>ps命令的用法</li>
<li>TCP的连接和断开（三次握手、四次挥手）</li>
<li>哪个Linux命令可以查看TCP的连接状态</li>
<li>怎样查看端口的状态（netstat），都有哪些状态</li>
<li>一个文件里有一列是ip地址，怎样取出这些ip，并且去重</li>
<li>Linux下，如果CPU 100%，怎样找到发生死循环的进程/线程？</li>
<li>如何在Linux下查看CPU的占用情况？怎样查看线程的栈轨迹？</li>
</ol>
<h1 id="Java基础、Java_Web、框架、设计模式">Java基础、Java Web、框架、设计模式</h1><ol>
<li>Object类里有哪些方法</li>
<li>Integer和Number里的equals方法 （Number直接继承了Object里的equals，<br>Integer是重写过的equals比较值而不是对象）</li>
<li>JDBC的开发流程</li>
<li>使用Statement可能发生怎样的SQL注入，preparedStatement是怎样防止SQL注入的，如果使用statement你怎样去防止SQL注入</li>
<li>如果JDBC的连接数过多你怎样去解决每次连接都要新建一个连接带来的问题</li>
<li>写一个获取单例连接的程序</li>
<li>说一说连接池是怎样解决连接过多的问题的</li>
<li>Spring实现原理</li>
<li>Spring MVC有哪些配置</li>
<li>Spring用到哪些设计模式</li>
<li>Spring MVC怎样处理请求</li>
<li>从你打开浏览器，输入一个网址到页面呈现，这整个过程都发生了什么</li>
<li>常用的设计模式</li>
<li>单例模式如何防止反射攻击</li>
</ol>
<h1 id="算法题"><strong>算法题</strong></h1><h1 id="阿里">阿里</h1><h2 id="一面（电话面）">一面（电话面）</h2><ol>
<li>判断一个数是不是2的幂</li>
<li>有一个大小为100的整型数组，数字范围1到100，找出数组中重复的2个数</li>
<li>将字符串的空格移动到末尾</li>
<li>找到交叉链表的交叉点</li>
<li>找到一个数组中最小的k个数</li>
</ol>
<h2 id="二面（现场面）">二面（现场面）</h2><ol>
<li>实现双向链表及查找、删除</li>
<li>实现一个排序算法（我写的快排）</li>
<li>实现树的遍历（DFS/BFS任意写一个，我写的先序遍历）</li>
<li>实现线程间通信（我用一个阻塞队列实现了生产者消费者模式）</li>
</ol>
<h2 id="三面（淘宝技术部）">三面（淘宝技术部）</h2><h2 id="四面（boss面）">四面（boss面）</h2><p>一共有16支球队，每支球队水平各有优劣，随机选取两支球队，编写程序，使得水平较高的球队被选中的概率大。</p>
<h2 id="五面（hr面）">五面（hr面）</h2><p>自我介绍<br>问题</p>
<ol>
<li>你的专业并不是计算机专业，你平时是怎样学习计算机相关知识的</li>
<li>你谈到比如在百度全Linux环境编程，你是如何克服这些困难的</li>
<li>谈一谈你在百度实习的收获</li>
<li>遇到一些比如需要多人协作或者跨部门解决或者你推动的项目时，你会如何解决</li>
<li>说说你都有哪些学习方法</li>
<li>与其他面试者相比，你觉得你有哪些优势</li>
<li>谈谈你未来的规划</li>
<li>你有哪些问我的</li>
</ol>
<h1 id="微软（一面二面）">微软（一面二面）</h1><ol>
<li>二叉树的反序列化</li>
<li>堆的初始化</li>
<li>平面上有n个点，找到一条直线将这些点平均分为两部分</li>
</ol>
<h1 id="腾讯">腾讯</h1><ol>
<li>求链表倒数第k个节点</li>
<li>判断两个链表是否有交叉</li>
<li>两个数组求其交集（位哈希）</li>
<li>求字符串的全排列（递归）</li>
</ol>
<h1 id="搜狐">搜狐</h1><p>反转链表</p>
<h1 id="今日头条">今日头条</h1><ol>
<li>复杂链表的复制</li>
<li>求一个数组的最大值最小值</li>
<li>钢管分割策略</li>
</ol>
<h1 id="小米">小米</h1><ol>
<li>二叉树PathSum的递归与非递归实现</li>
<li>整数数据流，整数大小在1和1000之间，有一个大小为m的数组，找出数据流中第一对数，它们的和为数组中的某一元素</li>
<li>下面一段代码运行会有怎样的结果？</li>
</ol>
<pre><code><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>{
    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun1</span><span class="params">()</span> </span>{
             System.out.println(<span class="string">"fun1..."</span>);
       }
       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun2</span><span class="params">()</span> </span>{
             System.out.println(<span class="string">"fun2..."</span>);
       }
}
<span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>{
       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun1</span><span class="params">()</span> </span>{
             <span class="keyword">super</span>.fun1();
       }

       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun2</span><span class="params">()</span> </span>{
             <span class="keyword">this</span>.fun2();
       }

       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{
             A a = <span class="keyword">new</span> B();
             a.fun1();
             a.fun2();
       }
}
</code></pre><h1 id="美团">美团</h1><ol>
<li>合并链表（递归与非递归实现）</li>
<li>1000万个ip地址段，找出现次数最多的10个 （map reduce的思想： map：可按ip网段分，或者MD5取模 reduce：分别计算每个文件的前10然后合并）</li>
<li>1000万个数，求其中最大的1000个 （可以用优先级队列T(n) = O(nlogk), 或者切分法T(n) = O(n)）</li>
</ol>
<h1 id="新浪">新浪</h1><p>一组排序的连续数组，其中一个是重复的，找出这个重复数字</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>漫长的暑期实习面试结束了，从3月下旬到5月上旬，笔者面试了十余家公司，面试过程也多有波折。最后笔者还是如愿拿到了阿里巴巴淘宝技术部的实习Offer，此外还收到了小米的实习Offer。最终选择了阿里巴巴，梦想成真。 　　<br>　　尘埃落定，笔者决定将面试经验给大家分享一下。笔者面试方向以Java开发为主，内容包括Java开发基础、数据结构与算法、Linux与数据库等内容。非Java开发的同学也能从中得到启发。希望能给尚未找到暑期实习的同学提供一些帮助，给2017正式校招面试提供一些参考和借鉴<br>]]>
    
    </summary>
    
      <category term="Java" scheme="http://wenzhuang.me/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MySQL架构概述]]></title>
    <link href="http://wenzhuang.me/2017/05/01/MySQL%E6%9E%B6%E6%9E%84%E6%A6%82%E8%BF%B0/"/>
    <id>http://wenzhuang.me/2017/05/01/MySQL架构概述/</id>
    <published>2017-05-01T15:55:00.000Z</published>
    <updated>2017-06-09T13:04:13.271Z</updated>
    <content type="html"><![CDATA[<p>MySQL最重要、最与众不同的特性是它的存储引擎架构，这种架构的设计将查询处理（Query Processing）及其他系统任务（Server Task）和数据的存储/提取相分离。本文概要地描述了MySQL的服务器架构以及各存储引擎之间的主要区别。<br><a id="more"></a></p>
<h1 id="1-MySQL逻辑架构">1.MySQL逻辑架构</h1><p>下图展示了MySQL的逻辑架构图。</p>
<blockquote>
<p>　<img src="http://7xo4wg.com1.z0.glb.clouddn.com/mysql_architecture.png" alt="MySQL服务器逻辑架构图"></p>
</blockquote>
<p>MySQL的逻辑架构分为三层。<br>　　最上层的服务并不是MySQL所独有，大多数基于网络的客户端/服务器的工具或者服务都有类似架构。比如连接处理、授权认证、安全等。<br>　　大多数MySQL的核心服务都在第二层，包括查询、分析、优化、缓存以及所有的内置函数，所有的跨存储引擎的功能都在这一层实现：存储过程、触发器、视图。<br>　　第三层包含了存储引擎。存储引擎负责MySQL中数据的存储和提取。服务器通过API与存储引擎进行通信，这些接口屏蔽了存储引擎间的差异性，使得这些差异对上层的查询过程透明。存储引擎不会去解析SQL（除InnoDB会解析外键之外），不同存储引擎之间也不会相互通信，而只是简单地响应上层服务器的请求。</p>
<h2 id="1-1_连接管理与安全性">1.1 连接管理与安全性</h2><p>每一个客户端连接都会在服务器进程中拥有一个线程，这个连接的查询只会在这个单独的线程中执行。服务器会缓存线程，因此不需要为每个新建的连接创建和销毁线程。<br>　　但客户端连接到MySQL服务器时，服务器需要对其进行认证。认证基于用户名、原始主机信息和密码。一旦客户端连接成功，服务器会继续验证该客户端是否具有执行某个特定查询的权限。</p>
<h2 id="1-2_优化与执行">1.2 优化与执行</h2><p>MySQL会解析查询，并创建内部数据结构（解析树），然后对其进行各种优化，包括重写查询、决定表的读取顺序，以及选择合适的索引等。<br>　　优化器不关心表使用的哪种存储引擎，但存储引擎对于优化查询是有影响的。<br>　　对于SELECT语句，在查询解析之前，服务器会先检查查询缓存（Query Cache），如果能够在其中找到对应的查询，服务器就不必再执行查询解析。</p>
<h1 id="2-并发控制">2.并发控制</h1><h2 id="2-1_读写锁">2.1 读写锁</h2><ul>
<li>共享锁 读锁 非阻塞</li>
<li>排他锁 写锁 阻塞</li>
</ul>
<p>写锁比读锁有更高的优先级，可以插入到读锁队列的前面</p>
<h2 id="2-2_锁粒度">2.2 锁粒度</h2><p>锁策略：在锁的开销和数据的安全性之间寻求平衡</p>
<ul>
<li>表锁 开销最小</li>
<li>行锁 最大并发度，最大锁开销</li>
</ul>
<h1 id="3-事务">3.事务</h1><p>事务是一组原子性的SQL查询，或者说一个独立的工作单元。事务内的语句要么全部执行成功，要么全部执行失败。</p>
<ul>
<li>START TRANSACTION 开始事务</li>
<li>COMMIT提交事务</li>
<li>ROLLBACK撤销事务</li>
</ul>
<p><strong>事务的特征ACID</strong></p>
<ul>
<li>atomicity 原子性<br>一个事务必须被视为一个不可分割的最小工作单元，整个事务中的所有操作要么全部提交成功，要么全部失败回滚。</li>
<li>consistency 一致性<br>数据库总是从一个一致性的状态转换到另外一个一致性的状态。</li>
<li>isolation隔离性<br>通常来说，一个事务所做的修改在最终提交前，对其它事务是不可见的。</li>
<li><p>durability持久性<br>一旦事务提交，则其所做的修改就会永久保存到数据库中。</p>
<h2 id="3-1隔离级别">3.1隔离级别</h2><p>SQL标准定义了四种隔离级别，每一种级别都规定了一个事务中所做的修改，哪些在事务内和事务间是可见的，哪些是不可见的。较低级别的隔离通常可以执行更高的并发，系统的开销也更低。</p>
</li>
<li><p>READ UNCOMMITED（未提交读）</p>
</li>
</ul>
<p>事务中的修改即使没有提交，对其他事务也都是可见的。事务可以读取未提交的数据，这被称为脏读（Dirty Read）。</p>
<ul>
<li>READ COMMIT（提交读）</li>
</ul>
<p>一个事务从开始到提交之前，所做的任何修改对其它事务都是不可见的。这个级别有时候也叫不可重复读（nonrepeateble read），因为两次执行相同的查询，可能会得到不一样的结果。</p>
<ul>
<li>REPEATABLE READ （可重复读）</li>
</ul>
<p>解决了脏读和不可重复读，理论上，无法解决幻读的问题。<br>幻读（Phantom Read），是指当某个事务在读取某个范围内的记录时，另一个事务又在该范围内插入了新的记录，当之前的事务再次读取范围的记录时，会产生幻行。<br>InnoDB和XtraDB存储引擎通过多版本并发控制解决了幻读的问题。<br>可重复读是MySQL的默认隔离级别。</p>
<ul>
<li>SERIALIZABLE（可串行化）</li>
</ul>
<p>SERIALIZABLE是最高的隔离级别。它通过强制事务串行执行，避免前面说的幻读的问题。</p>
<p><img src="http://7xo4wg.com1.z0.glb.clouddn.com/mysql_isolation_table.jpg" alt="ANSI SQL隔离级别"></p>
<h2 id="3-2_死锁">3.2 死锁</h2><p>死锁是指两个或者多个事务在同一资源上相互占用，并请求锁定对方占用的资源，从而导致恶性循环的现象。当多个事务试图以不同的顺序锁定资源时，就可能产生死锁。多个事务同时锁定一个资源时，也会产生死锁。<br>　　InnoDB目前处理死锁的方法是，将持有最少行级排他锁的事务进行回滚。<br>　　死锁的产生有双重因素：有些是真正的数据冲突，有些是由于存储引擎的实现方式导致的。死锁发生后，只有部分或者完全回滚其中一个事务才能打破死锁。大多数情况下，只需重新执行因死锁回滚的事务即可。</p>
<h2 id="3-3_事务日志">3.3 事务日志</h2><p>事务日志可以帮助提高事务的效率。使用事务日志，存储引擎在修改表的数据时只需要修改其内存拷贝，再把该修改行为记录到持久在硬盘上的事务日志中，而不用每次都将修改的数据本身持久到硬盘。事务日志采用的是追加的方式，事务日志持久后，内存中被修改的数据在后台可以慢慢刷回到磁盘。通常称为预写式日志（Write-Ahead Logging），修改数据需要写两次磁盘。<br>　　如果数据的修改已经记录到日志并持久化，但数据本身还没有写回磁盘，此时系统崩溃，存储引擎在重启时能够自动恢复这部分修改的数据。</p>
<h2 id="3-4_MySQL中的事务">3.4 MySQL中的事务</h2><p>MySQL中提供了两种事务型的存储引擎：InnoDB和NDB Cluster。另外还有一些第三方的存储引擎，比如XtraDB和PBXT。<br>MySQL默认采用自动提交（AUTOCOMMIT）模式。也就是说，如果不是显式地开始一个事务，则每个查询都被当做一个事务执行提交操作。在当前连接中，可以通过设置AUTOCOMMIT变量来启用或者禁用自动提交模式。还有一些命令，在执行前强制执行COMMIT提交当前的活动事务。如ALTER TABLE、LOCK TABLES等。MySQL可以通过执行SET TRANSACTION LEVEL命令来设置隔离级别。MySQL能够识别所有的4个ANSI隔离级别，InnoDB引擎也支持所有的隔离级别。<br>MySQL服务器层不管理事务，事务是由下层的存储引擎实现的。所有在同一个事务中，使用多种存储引擎是不可靠的。<br>InnoDB采用的两阶段锁定协议（two-phase locking protocol）。在事务执行过程中，随时都可以执行锁定，锁只有在执行COMMIT或者ROLLBACK的时候才会释放，并且所有的锁是在同一时刻被释放。InnoDB会根据隔离级别在需要的时候自动加锁。InnoDB也支持通过特定的语句进行显示锁定，如SET … LOCK IN SHARE MODE等。</p>
<h1 id="4-多版本并发控制（MVCC）">4.多版本并发控制（MVCC）</h1><p>可以认为MVCC是行级锁的一个变种，但是在很多情况下避免了加锁操作，开销更低。<br>　　MVCC的实现，是通过保存数据在某一个时间点的快照来实现的。不管需要执行多长时间，每个事务看到的数据都是一致的。根据事务开始时间的不同，每个事务对同一张表，同一时刻看到的数据可能是不一样的。<br>　　不同存储引擎的MVCC实现不同，典型的有乐观并发控制和悲观并发控制。InnoDB的MVCC，是通过在每行记录后面保存两个隐藏的列来实现的。这两个列，一个保存了行的创建时间，一个保存行的过期时间（或删除时间）。存储的不是实际的时间值，而是系统版本号。每开始一个新的事务，系统版本号都会自动递增。事务开始时刻的系统版本号会作为事务的版本号，用来和查询到的每行记录的版本号进行比较。保存这两个额外的系统版本号，使大多数读操作都可不用加锁。不足之处是每行记录都需要额外的存储空间。MVCC只在REPEATABLE READ和READ COMMITTED两个隔离级别下工作。</p>
<h1 id="5-存储引擎">5.存储引擎</h1><p>MySQL将每个数据库（也可称之为schema）保存为数据目录下的一个子目录。创建表时，MySQL会在数据库子目录下创建一个和表同名的.frm文件保存表的定义。</p>
<h2 id="5-1_InnoDB">5.1 InnoDB</h2><p>MySQL默认的事务型引擎。<br>　　InnoDB采用MVCC来支持高并发，并且实现了四个标准的隔离级别。<br>默认REPEATABLE READ，通过间隙锁（next-key locking）策略防止幻读的出现。间隙锁使得InnoDB不仅仅锁定查询涉及的行，还会对索引中的间隙进行锁定，以防止幻影行的插入。<br>　　InnoDB是基于聚簇索引建立的，对之间查询有很高的性能。它的二级索引（非主键索引）中必须包含主键列，如果主键列很大的话，其它所有索引都会很大。<br>　　从磁盘读取数据时采用可预测性预读，能够自动在内存中创建hash索引以加速读操作的自适应哈希索引(adaptive hash index)，以及能够加速插入操作的插入缓冲区（insert buffer）等。<br>参见 官方手册《InnoDB事务模型和锁》<br>　　InnoDB可以通过一些机制和工具支持真正的热备份，Oracle的MySQL Enterprise Backup、Percona的XtraBackup可以做到这一点。MySQL的其它存储引擎不支持热备份，要获取一致性视图需要停止对所有表的写入。</p>
<h2 id="5-2_MyISAM">5.2 MyISAM</h2><p>MyISAM支持全文本索引、压缩、空间函数（GIS）等。不支持事务和行级锁，崩溃后无法安全恢复。</p>
<h3 id="存储">存储</h3><p>　　MyISAM将表存在两个文件中：数据文件（.MYD）索引文件（.MYI）。如果表是变长行，则默认配置只能处理256TB的数据。</p>
<h3 id="特性">特性</h3><ul>
<li><p>加锁与并发<br>对整张表而不是行加锁。但是在表有读取查询的同时，也可以往表中插入新的记录（并发插入，concurrent insert）</p>
</li>
<li><p>修复<br>CHECK TABLE mytabl　检查表的错误。<br>REPAIR TABLE mytable 进行修复。<br>当MySQL服务器关闭，可以用myisamchk命令行工具进行检查和修复。</p>
</li>
<li><p>索引<br>即使是BLOB和TEXT等长字段，也可以基于其前500个字符创建索引。MyISAM也支持全文本索引，是一种基于分词创建的索引，可以支持复杂的查询。</p>
</li>
<li><p>延迟更新索引键（Delay Key Write）<br>在创建MyISAM表的时候，如果指定了DELAY_KEY_WRITE选项，在每次修改执行完成时，不会立刻将修改的索引数据写入磁盘，而是会写到内存中的键缓冲区（in-memory key buffer），只有在清理键缓存区或者关闭表的时候才会将对应的索引块写入到磁盘，极大地提升了写入性能。</p>
</li>
</ul>
<h3 id="压缩表">压缩表</h3><p>如果表在创建并导入数据后，不会再进行修改操作，那么这样的或许适合采用MyISAM压缩表。可以使用myisampack对MyISAM表进行压缩。压缩表能极大减少磁盘空间占用和磁盘I/O。</p>
<h2 id="5-3_MySQL内建的其它存储引擎">5.3 MySQL内建的其它存储引擎</h2><ul>
<li>Archive</li>
</ul>
<p>只支持INSERT和SELECT操作。</p>
<ul>
<li>Blackhole</li>
</ul>
<p>没有实现任何的存储机制，会丢弃所有插入的数据。但是服务器会记录Blackhole表的日志。</p>
<ul>
<li>CVS</li>
</ul>
<p>CVS引擎可以将普通的CVS文件（逗号分割值的文件）作为MySQL的表来处理。CVS引擎可以作为一种数据交换的机制。</p>
<ul>
<li>Frederated</li>
</ul>
<p>Frederated引擎是访问其他MySQL服务器的一个代理，它会创建一个到远程MySQL服务器的客户端连接，并将查询传输到远程服务器执行，然后提取或者发送需要的数据。</p>
<ul>
<li>Memory</li>
</ul>
<p>所有的数据都保存在内存中，可以快速地访问数据，但是重启后数据会丢失。支持Hash索引，查找非常快；表级锁，并发度低。在以下场景表现很好：用于查找或者映射表；用于缓存周期性聚合数据的结果；用于保存数据分析中产生的中间数据。</p>
<ul>
<li>NDB集群引擎</li>
</ul>
<p>MySQL服务器、NDB集群存储引擎，以及分布式、share-nothing的、容灾的、高可用的NDB数据库的组合，被称为MySQL集群。</p>
<h2 id="5-4_第三方存储引擎">5.4 第三方存储引擎</h2><h3 id="OLTP类引擎">OLTP类引擎</h3><p>OLTP，On-Line Transaction Processing，联机事务处理过程。</p>
<ul>
<li>XtraDB是基于InnoDB引擎的一个改进版本，改进点主要集中在性能、可测量性和操作灵活性方面。</li>
<li>PBXT支持引擎级别的复制、外键约束，并以一种比较复制的架构对固态存储（SSD）提供了适当的支持，还对较大的值类型BLOB也做了优化。</li>
<li>TokuDB引擎使用了一种新的叫做分形树（Fractal Trees）的索引数据结构，TokuDB是一种大数据存储引擎，拥有很高的压缩比，可以在很大的数据量上创建大量索引。</li>
<li>Rethinck最初是为固态存储设计的，采用了一种只能追加的写时复制B树（append-only copyon-write B-Tree）作为索引的数据结构。</li>
</ul>
<h3 id="面向列的存储引擎">面向列的存储引擎</h3><p>MySQL默认是面向行的，而在大数据量处理时，面向列的方式可能效率更高。如果不需要整行的数据，面向列的方式可以传输更少的数据。如果每一列都单独存储，那么压缩的效率也会更高。</p>
<ul>
<li>Infobright是最有名的面向列的存储引擎。在非常大的的数据量（数十TB）时，该引擎工作良好。Infobright是为数据分析和数据仓库应用设计的。数据高度压缩，按照块进行排序，每个块都对应有一组元数据。但该引擎不支持索引，但是块结构也是一种准索引（quasi-index）。</li>
<li>InfiniDB可以在一组机器集群间做分布式查询。</li>
</ul>
<h3 id="社区存储引擎">社区存储引擎</h3><p>大部分影响力有限，不建议使用。</p>
<h2 id="5-5_引擎的选择">5.5 引擎的选择</h2><p>除非需要用到某些InnoDB不具备的特性，并且没有其他办法可以代替，否则都应该选择InnoDB引擎。除非万不得已，不要混合使用多种存储引擎。<br>如果需要不同的存储引擎，需要考虑以下几个因素：</p>
<ul>
<li>事务 InnoDB支持事务</li>
<li>备份 InnoDB支持在线热备份</li>
<li>崩溃恢复 相对来说，MyISAM崩溃后发生损坏的概率比InnoDB要高的多，而且恢复速度也要慢。</li>
<li>特有的特性 比如，MySQL中只有MyISAM支持地理空间搜索。</li>
</ul>
<h3 id="应用场景">应用场景</h3><ul>
<li>日志型应用</li>
</ul>
<p>这一类应用对插入速度有很高的要求，数据库不能成为瓶颈。MyISAM或者Archive存储引擎对这类应用比较合适，因为它们开销低，而插入速度非常快。</p>
<ul>
<li>只读或者大部分情况下只读的表</li>
</ul>
<p>建议InnoDB。随着应用压力的上升，MyISAM可能会存在各种锁争用、崩溃后数据丢失的问题。</p>
<ul>
<li>订单处理</li>
</ul>
<p>需要支持事务，InnoDB是最佳选择</p>
<ul>
<li>电子公告牌和主题讨论论坛</li>
</ul>
<p>MyISAM对SELECT COUNT(*) FROM table等查询语句非常快。</p>
<ul>
<li>CD-ROM应用</li>
</ul>
<p>可以考虑使用MyISAM表或MyISAM压缩表</p>
<ul>
<li>大数据量</li>
</ul>
<p>Infobright是MySQL数据仓库最成功的解决方案，也有些大数据适合TokuDB。</p>
<h2 id="5-6_转换表的引擎">5.6 转换表的引擎</h2><ol>
<li><p>ALTER TABLE</p>
<pre><code>mysql&gt; ALTEE TABLE mytable ENGINE = InnoDB<span class="comment">;</span>
</code></pre><p>需要执行很长时间，MySQL会按行将原表数据复制到一张新表中，同时原表上会加上读锁。</p>
</li>
<li><p>导出和导入 使用mysqldump工具将数据导出到文件，然后修改文件中的CREATE TABLE语句的存储引擎选项，同时修改表名。</p>
</li>
<li><p>创建和查询（CREATE和SELECT）<br>综合了第一种方法的高效和第二种方法的安全。先创建一个新的存储引擎的表，然后利用INSERT…SELECT语法来导数据：</p>
<pre><code>mysql&gt; <span class="keyword">CREATE</span> TABLE innodb_table LIKE  myisam_table;
mysql&gt; ALTEE TABLE innodb_table ENGINE = InnoDB;
mysql&gt; INSERT <span class="keyword">INTO</span> innodb_table <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> myisam_table;
</code></pre><p>如果数据量很大，可以考虑作分批处理，针对每一段数据执行事务提交操作：</p>
<pre><code>mysql&gt; START TRANSACTION;
mysql&gt; INSERT <span class="keyword">INTO</span> innodb_table <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> myisam_table <span class="keyword">WHERE</span> id BETWEEN x <span class="keyword">AND</span> y;
mysql&gt; COMMIT;
</code></pre><p>如果有必要，可以在执行的过程中对原表加锁，以确保新表和原表的数据一致。</p>
</li>
</ol>
<h1 id="6-总结">6.总结</h1><p>MySQL拥有分层的架构，上层是服务器层的服务和查询执行引擎，下层则是存储引擎。<br>　　MySQL最初基于ISAM构建（后来被MyISAM取代），其后陆续添加了更多的存储引擎和事务支持。从MySQL 5.5起，InnoDB成为默认的存储引擎。InnoDB对绝大多数用户来说都是最佳选择。</p>
<p><strong><em>参考书籍：<a href="https://book.douban.com/subject/23008813/" target="_blank" rel="external">《高性能MySQL》</a></em></strong></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>MySQL最重要、最与众不同的特性是它的存储引擎架构，这种架构的设计将查询处理（Query Processing）及其他系统任务（Server Task）和数据的存储/提取相分离。本文概要地描述了MySQL的服务器架构以及各存储引擎之间的主要区别。<br>]]>
    
    </summary>
    
      <category term="MySQL" scheme="http://wenzhuang.me/tags/MySQL/"/>
    
      <category term="数据库" scheme="http://wenzhuang.me/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[23岁写给自己]]></title>
    <link href="http://wenzhuang.me/2016/04/02/23%E5%B2%81%E5%86%99%E7%BB%99%E8%87%AA%E5%B7%B1/"/>
    <id>http://wenzhuang.me/2016/04/02/23岁写给自己/</id>
    <published>2016-04-01T16:18:26.000Z</published>
    <updated>2016-07-10T07:26:49.722Z</updated>
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="http://music.163.com/outchain/player?type=2&id=29431066&auto=0&height=66"></iframe>

<p>王小波在他的《黄金时代》里面写到：“那一天我二十一岁，在我一生的黄金时代，我有好多奢望。我想爱，想吃，还想在一瞬间变成天上半明半暗的云。”<br><a id="more"></a> 　　读到这一句的时候，我正好二十一岁。当时我却并没有这种感觉，我没预料到我会在多年以后想起它，在我二十三岁的年纪。现在，我觉得这是我一生的黄金时代。<br>　　在我二十一岁的时候，我觉得自己是一朵飘在天空的乌云，风吹来，风吹走，留下一场雨。天空是灰色的，生活是坚硬的。随波逐流吧，不甘；特立独行吧，无奈。我想那是我的黑铁时代吧。<br>　　现在，我觉得，自己是天空中一只鸟，有了自己的翅膀，寻找最让自己快乐的树枝栖息，天上有一朵半明半暗的云。就像王小波说的：“我觉得自己会一直生猛下去。”<br>　　其实我一直没有变，我既不是云也不是鸟。但是我却一直在改变，我相信当我觉得我是鸟的时候，我是有翅膀的。当天空是灰色的时候，我能够面对它了，我不会被风裹着飘来飘去。我觉得这是我的黄金时代吧。<br>　　泰戈尔有一句诗：“云儿愿为一只鸟，鸟儿愿做一朵云。”我想我既愿意做一只鸟，也愿意做一朵云，如果那不是乌云的话。或者有一天我愿意做一只特立独行的猪。</p>
]]></content>
    <summary type="html">
    <![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="http://music.163.com/outchain/player?type=2&id=29431066&auto=0&height=66"></iframe>

<p>王小波在他的《黄金时代》里面写到：“那一天我二十一岁，在我一生的黄金时代，我有好多奢望。我想爱，想吃，还想在一瞬间变成天上半明半暗的云。”<br>]]>
    
    </summary>
    
      <category term="随笔" scheme="http://wenzhuang.me/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[初等排序算法]]></title>
    <link href="http://wenzhuang.me/2016/03/25/%E5%88%9D%E7%AD%89%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://wenzhuang.me/2016/03/25/初等排序算法/</id>
    <published>2016-03-25T11:06:46.000Z</published>
    <updated>2016-04-18T14:57:16.747Z</updated>
    <content type="html"><![CDATA[<p>这里要说的排序算法包括三个初等的排序算法：冒泡排序、选择排序和插入排序。它们在平均时间下的时间复杂度均为<em>O(n^2)</em>，但是他们的性质各不相同，适用于不同的场景。<br><a id="more"></a><br>　　笔者在Github新建了仓库<a href="https://github.com/WenZhuang/Algorithm" target="_blank" rel="external">Algorithm</a>，并将三种算法的实现以静态方法的形式放入<a href="https://github.com/WenZhuang/Algorithm/blob/master/sort/Sort.java" target="_blank" rel="external">Sort.java</a>中，使用了Java语言来进行算法描述。每次将实现了Comparable接口的对象进行升序排序。<br>　　排序中对时间复杂度影响最大的是对象之间的比较次数和交换次数，下面的三种排序算法都存在着比较和交换。为了方便，将比较和交换用静态方法实现，以供排序算法直接调用。比较和交换的代码如下：</p>
<pre><code><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">boolean</span> <span class="title">less</span><span class="params">(Comparable v, Comparable w)</span> </span>{
    <span class="keyword">return</span> v.compareTo(w) &lt; <span class="number">0</span>;
}

<span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">exch</span><span class="params">(Comparable[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>{
    Comparable t = a[i];
    a[i] = a[j];
    a[j] = t;
}
</code></pre><p>　　　<img src="http://7xo4wg.com1.z0.glb.clouddn.com/the_best_sort.png" alt=""></p>
<p><strong>冒泡排序</strong><br>　　冒泡排序是大部分人最早接触的排序算法，“冒泡”一词也可谓是生动形象。对于大小为n的数组来说，要经历n趟排序。每一趟比较相邻两个对象，如果后一对象小于前一对象，则将两者交换。每一趟排序，这一趟最大的元素都会出现在最后一个位置，就像是冒泡一样。n趟排序后排序完成。冒泡排序的算法实现如下：</p>
<pre><code><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">BubbleSort</span><span class="params">(Comparable[] a)</span> </span>{
    final <span class="keyword">int</span> N = a.length;
    <span class="keyword">for</span> (<span class="keyword">int</span> i = N - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) {
        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) {
            <span class="keyword">if</span> (less(a[j + <span class="number">1</span>], a[j])) {
                exch(a, j, j + <span class="number">1</span>);
            }
        }
    }
}
</code></pre><p><strong>选择排序</strong><br>　　选择排序是最简单的排序算法，它的时间复杂度与输入无关。对于大小为n的数组，需经历n趟排序，每一趟遍历整个数组，找到最小的对象并与第一个对象交换。n趟排序后，排序完成。选择排序的算法实现如下：</p>
<pre><code>　　
　<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> selectionSort(Comparable[] a) {
    <span class="keyword">final</span> <span class="built_in">int</span> N = a.length;
    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; N; i++) {
        <span class="built_in">int</span> <span class="built_in">min</span> = i;
        <span class="keyword">for</span> (<span class="built_in">int</span> j = i; j &lt; N; j++)
            <span class="keyword">if</span> (less(a[j], a[<span class="built_in">min</span>])) {
                <span class="built_in">min</span> = j;
            }
        exch(a, i, <span class="built_in">min</span>);
    }
}
</code></pre><p><strong>插入排序</strong><br>　　与选择排序不同，插入排序的所需时间与输入密切相关。插入排序特别适合部分有序的数组的排序，或者小规模数组的排序。例如，希尔排序就是对插入排序的改进，它先将数组变成部分有序，再进行排序。在对归并排序和快速排序的改进算法中，可在数组递归到小规模数组时使用插入排序，以减小递归对时间的消耗。插入排序的算法实现如下：</p>
<pre><code><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertionSort</span><span class="params">(Comparable[] a)</span> </span>{
        final <span class="keyword">int</span> N = a.length;
        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N - <span class="number">1</span>; i++) {
            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &gt; <span class="number">0</span>; j--)
                <span class="keyword">if</span> (less(a[j], a[j - <span class="number">1</span>])) {
                    exch(a, j, j - <span class="number">1</span>);
                }
        }
    }
</code></pre><p><strong>测试用例</strong><br>　　一般来说，排序算法在处理大规模数组时才能体现出优势。这里我仅仅验证了各种算法的正确性。测试代码放在<a href="https://github.com/WenZhuang/Algorithm/blob/master/test/SortTest.java" target="_blank" rel="external">SortTest.java</a>中，先随机生成了10个0~100的整数，赋给大小为10的整型数组中，注意这里的整型要变成响相应的包装类Integer。然后，对数组排序，分别输出排序前和排序后的数组。要测试不同算法，只需改动代码中注释的位置。代码如下：
　　</p>
<pre><code><span class="keyword">public</span> <span class="keyword">class</span> SortTest {

<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{
    <span class="comment">// TODO Auto-generated method stub</span>
    Integer[] a = <span class="keyword">new</span> Integer[<span class="number">10</span>];
    final <span class="keyword">int</span> N = a.length;
    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++){
        a[i] = (<span class="keyword">int</span>) (Math.random()*<span class="number">100</span>);
    }
    System.out.println(<span class="string">"排序前"</span>);
    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++){
        System.out.print(a[i] + <span class="string">" "</span>);
    }
        Sort.BubbleSort(a);
<span class="comment">//        Sort.selectionSort(a);</span>
<span class="comment">//        Sort.insertionSort(a);</span>
        System.out.println(<span class="string">"\n排序后"</span>);
        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++){
            System.out.print(a[i] + <span class="string">" "</span>);
        }        
    }
}
</code></pre><p><strong>测试结果</strong></p>
<pre><code>排序前：
<span class="number">53</span> <span class="number">41</span> <span class="number">72</span> <span class="number">60</span> <span class="number">85</span> <span class="number">72</span> <span class="number">40</span> <span class="number">16</span> <span class="number">64</span> <span class="number">6</span> 
排序后：
<span class="number">6</span> <span class="number">16</span> <span class="number">40</span> <span class="number">41</span> <span class="number">53</span> <span class="number">60</span> <span class="number">64</span> <span class="number">72</span> <span class="number">72</span> <span class="number">85</span>
</code></pre> <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="http://music.163.com/outchain/player?type=2&id=108251&auto=1&height=66"></iframe>


]]></content>
    <summary type="html">
    <![CDATA[<p>这里要说的排序算法包括三个初等的排序算法：冒泡排序、选择排序和插入排序。它们在平均时间下的时间复杂度均为<em>O(n^2)</em>，但是他们的性质各不相同，适用于不同的场景。<br>]]>
    
    </summary>
    
      <category term="排序" scheme="http://wenzhuang.me/tags/%E6%8E%92%E5%BA%8F/"/>
    
      <category term="算法" scheme="http://wenzhuang.me/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用jQuery发送Ajax请求]]></title>
    <link href="http://wenzhuang.me/2015/12/21/%E4%BD%BF%E7%94%A8jQuery%E5%8F%91%E9%80%81Ajax%E8%AF%B7%E6%B1%82/"/>
    <id>http://wenzhuang.me/2015/12/21/使用jQuery发送Ajax请求/</id>
    <published>2015-12-21T11:00:55.000Z</published>
    <updated>2016-03-16T08:45:27.202Z</updated>
    <content type="html"><![CDATA[<p>传统网页与服务器通信往往需要通过提交整个表单来实现，这样用户不得不每次在提交表单时重刷整个页面，带来很不好的用户体验，在这个背景下Ajax应运而生。<br>　　AJAX 即Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。Ajax不是新的编程语言，而是一种使用现有标准的新方法。Ajax能在不重新加载整个页面的情况下，与服务器进行数据交换，实现网页局部刷新。AJAX是与服务器交换数据并更新部分网页的艺术。更多Ajax的基本概念和语法可以参考 <a href="http://www.w3school.com.cn/ajax/index.asp" target="_blank" rel="external">w3cschool的Ajax教程</a>。<br>　　<a id="more"></a><br>　　使用JavaScript发送Ajax请求需要使用XMLHttpRequest对象，但是这种方式比较繁琐，需要较大的代码量。更多关于JavaScript可以访问<a href="http://www.w3school.com.cn/js/index.asp" target="_blank" rel="external">w3cschool的JavaScript教程</a>。jQuery是JavaScript的一个库,极大简化了JS的编程，其中就包含了对Ajax请求的封装。更多详细的jQuery语法可以访问<a href="http://www.w3school.com.cn/jquery/index.asp" target="_blank" rel="external">w3cschool的jQuery教程</a>。<br>　　只要了解了基本的JS语法和Ajax的基本概念、jQuery选择器的使用，jQuery很快就能上手，使用起来非常方便。使用jQuery需要先到<a href="http://jquery.com/download/" target="_blank" rel="external">jQuery官网</a>下载你所需的jQuery库,jQuery类和函数的可以查询<a href="http://api.jquery.com/" target="_blank" rel="external">jQuery官方API文档</a>。<br>　　<img src="http://7xo4wg.com1.z0.glb.clouddn.com/github_logo.png" alt=""><br>　　为此，笔者新建了一个Java web工程WebDemo，已上传至Github的<br><a href="https://github.com/WenZhuang/WebDemo" target="_blank" rel="external">WebDemo仓库</a>。在WebRoot目录下有一个AjaxDemo.html包含了此次前端页面的代码<a href="https://github.com/WenZhuang/WebDemo/blob/master/WebRoot/AjaxDemo.html" target="_blank" rel="external">AjaxDemo.html</a>。src目录下包含了响应网页的服务器端代码<a href="https://github.com/WenZhuang/WebDemo/blob/master/src/com/wenzhuang/servlet/AjaxDemoServlet.java" target="_blank" rel="external">AjaxDemoServlet</a>。<br>　　AjaxDemo.html的源代码如下。jQuery代码包含在script标签中，先引用了jQuery库的地址。在文档准备就绪后，给GET按钮和POST按钮添加点击监听事件。使用了jQuery的ajax([settings])函数去发送Ajax请求，参数是一系列用于描述请求信息的键值对。具体的函数描述请见<a href="http://api.jquery.com/jQuery.ajax/#jQuery-ajax-settings" target="_blank" rel="external">jQuery-ajax-settings</a>。<br>　　在发送get请求时设置请求的方法为GET，请求的URL为服务端的AjaxDemoServlet，数据交换格式为JSON，并且实现两个回调函数，分别在响应成功和失败时调用。如果服务请求成功，通过回调函数将取到一个JSON格式的数据。本例中该JSON对象转换为字符串后为{“name”:”wenzhuang”,”task”:”java”},可以通过回调函数使用data.name和data.task取到对应的值，并显示网页上。更多关于JSON请见<a href="http://www.w3school.com.cn/json/index.asp" target="_blank" rel="external">w3cschool的JSON教程</a>。<br>　　在发送post请求时，除了设置请求方法、请求URL，数据交换格式外，还需要设置一个JSON格式的数据作为请求实体发送到服务端。这里是取出用户填在表单中的用户名密码，发送到服务器，再通过回调函数取回服务端的验证信息，显示在网页上。网页的运行效果及截图请见<a href="https://github.com/WenZhuang/WebDemo/blob/master/README.md" target="_blank" rel="external">README.md</a>。</p>
<pre><code><span class="doctype">&lt;!DOCTYPE html&gt;</span>
<span class="tag">&lt;<span class="title">html</span>&gt;</span>
<span class="tag">&lt;<span class="title">head</span>&gt;</span>
<span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"js/jquery-2.1.4.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
<span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript">
$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
  $(<span class="string">"#getBtn"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
    $.ajax({
        type:<span class="string">"GET"</span>,
        url:<span class="string">"/WebDemo/servlet/AjaxDemoServlet"</span>,
        dataType:<span class="string">"json"</span>,
        success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>{
            $(<span class="string">"#data"</span>).html(data.name + <span class="string">'的任务是'</span> + data.task);
        },
        error:<span class="function"><span class="keyword">function</span>(<span class="params">jqXHR</span>)</span>{
             $(<span class="string">"#data"</span>).html(<span class="string">"发生错误:"</span>+jqXHR.status);
        }
    });
  });

   $(<span class="string">"#postBtn"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
      $.ajax({
        type:<span class="string">"POST"</span>,
        url:<span class="string">"/WebDemo/servlet/AjaxDemoServlet"</span>,
         data:{
           username:$(<span class="string">"#username"</span>).val(),
           password:$(<span class="string">"#password"</span>).val(),
        },
        dataType:<span class="string">"json"</span>,     
        success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>{
            <span class="keyword">if</span>(data.state){
                $(<span class="string">"#test"</span>).html(data.msg);
            }<span class="keyword">else</span>{
                $(<span class="string">"#test"</span>).html(<span class="string">"验证未通过:"</span>+ data.msg);
            }
        },
        error:<span class="function"><span class="keyword">function</span>(<span class="params">jqXHR</span>)</span>{
             $(<span class="string">"#test"</span>).html(<span class="string">"发生错误:"</span>+jqXHR.status);
        }
    });
  });
});
</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
<span class="tag">&lt;/<span class="title">head</span>&gt;</span>
<span class="tag">&lt;<span class="title">body</span>&gt;</span>

<span class="tag">&lt;<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">button</span> <span class="attribute">id</span>=<span class="value">"getBtn"</span>&gt;</span>GET<span class="tag">&lt;/<span class="title">button</span>&gt;</span>
<span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"data"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">br</span>&gt;</span>
<span class="tag">&lt;<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">span</span>&gt;</span>用户名<span class="tag">&lt;/<span class="title">span</span>&gt;</span>
<span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">id</span>=<span class="value">"username"</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">span</span>&gt;</span>密　码<span class="tag">&lt;/<span class="title">span</span>&gt;</span> 
<span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">id</span>=<span class="value">"password"</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">button</span> <span class="attribute">id</span>=<span class="value">"postBtn"</span>&gt;</span>POST<span class="tag">&lt;/<span class="title">button</span>&gt;</span>
<span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"test"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span>

<span class="tag">&lt;/<span class="title">body</span>&gt;</span>
<span class="tag">&lt;/<span class="title">html</span>&gt;</span>
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>传统网页与服务器通信往往需要通过提交整个表单来实现，这样用户不得不每次在提交表单时重刷整个页面，带来很不好的用户体验，在这个背景下Ajax应运而生。<br>　　AJAX 即Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。Ajax不是新的编程语言，而是一种使用现有标准的新方法。Ajax能在不重新加载整个页面的情况下，与服务器进行数据交换，实现网页局部刷新。AJAX是与服务器交换数据并更新部分网页的艺术。更多Ajax的基本概念和语法可以参考 <a href="http://www.w3school.com.cn/ajax/index.asp">w3cschool的Ajax教程</a>。<br>]]>
    
    </summary>
    
      <category term="Ajax" scheme="http://wenzhuang.me/tags/Ajax/"/>
    
      <category term="JavaScript" scheme="http://wenzhuang.me/tags/JavaScript/"/>
    
      <category term="jQuery" scheme="http://wenzhuang.me/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android多线程之AsyncTask]]></title>
    <link href="http://wenzhuang.me/2015/12/14/Android%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B9%8BAsyncTask/"/>
    <id>http://wenzhuang.me/2015/12/14/Android多线程之AsyncTask/</id>
    <published>2015-12-14T13:30:00.000Z</published>
    <updated>2015-12-24T10:26:20.917Z</updated>
    <content type="html"><![CDATA[<p>对Android开发者来说，如何处理多线程问题是无法绕过的问题。每个Android开发者或多或少都遇到过ANR(Application Not Responding)异常，Android默认当UI线程阻塞超过20s时将会引发ANR异常。因此在处理耗时操作时应当将其放入新线程中，但是这样将面临一个问题，如何在新线程中更新UI组件呢?<br>　　Android提供如下几种方案：Handler、AsyncTask、Activity.runOnUiThread(Runnable)、View.post(Runnable)和View.postDelayed(Runnable,long)。其中Handler功能最强大，处理最灵活，实际上AsyncTask正是对Handler的封装，而后三种方式则略显繁琐。AsyncTask是Android开发非常常用的处理多线程问题的工具，使用起来也简单方便，适用于简单的异步处理。<br>　　<a id="more"></a><br>　　AsyncTask<params,progress,result>是一个抽象类，通常用于被继承，需要制定三个泛型参数。Params，启动任务执行时的输入参数的类型；Progress，后台执行任务时进度值的类型；Result，后台执行任务返回结果的类型。通常需要实现AsyncTask的如下方法：doInBackgroud(Params…)完成后台执行的任务，只有这个方法在新线程中运行。onProgressUpdate(Progress… values)，当在doInBackgroud()方法中调用publishProgress(Progress… values)时将触发该方法，用于显示任务执行的进度；onPreExecute()用于在执行后台任务前完成一些初始化的工作；onPostExecute(Result result):在完成后台任务后，doInBackgroud()方法会把返回值传给该方法，该方法一般用于更新UI。<br>　　使用AsyncTask时一般遵循如下规则:必须在UI线程中创建AsyncTask的实例并调用execute()方法；AsyncTask的方法由Android自动调用，执行顺序是onPreExecute()、doInBackgroud()、onProgressUpdate（）和onPostExecute()；每个AnyncTask只能被执行一次，多次调用将引发异常。<br>　　　　<img src="http://7xo4wg.com1.z0.glb.clouddn.com/Android_funny_logo.jpg" alt=""><br>　　<br>　　笔者使用AsyncTask实现了一个下载图片的示例app。源代码及app截图说明已上传至我的github的<a href="https://github.com/WenZhuang/AndroidDemos" target="_blank" rel="external">AndroidDemo仓库</a>。AndroidDemos是我在github新建的一个仓库，以后会上传更多的Android示例程序代码。<br>　　其中，ImageTask扩展了AsyncTask,我单独把ImageTask的源代码上传至<a href="https://github.com/WenZhuang/AndroidUtils/blob/master/ImageTask.java" target="_blank" rel="external">AndroidUtils仓库</a>。我的AndroidUtils仓库用于存放有用的Android工具类，ImageTask可作为下载图片的工具类。另外欢迎大家关注我的github,地址是<a href="https://github.com/WenZhuang" target="_blank" rel="external">https://github.com/WenZhuang</a>。<br>　　<br>　　ImageTask的源代码如下所示。使用ImageTask时，先要传入一个Context对象和一个ImageView对象作为ImageTask构造函数的参数，并且在调用execute()时需要传入图片的URL地址。在onPreExecute()方法中，实现了对进度条的设置和显示。因为没有使用水平进度条来显示进度，因此没有重写onProgressUpdate()方法。在doInBackground(String…)方法中，使用了HttpClient访问网络，关于HttpClient的使用方法请见我的博文<em><a href="http://wenzhuang.me/2015/11/28/%E4%BD%BF%E7%94%A8HttpCLient%E5%A4%84%E7%90%86HTTP%E8%AF%B7%E6%B1%82/">使用HttpClient处理HTTP请求</a></em>。使用BitmapFactory的decodeStream(InputStream)方法将网络输入流转化成Bitmap对象。在onPostExecute(Bitmap)中实现了将图片装载入ImageView，并且让进度条消失。</params,progress,result></p>
<pre><code><span class="preprocessor"><span class="keyword">import</span> android.app.ProgressDialog;</span>
<span class="preprocessor"><span class="keyword">import</span> android.content.Context;</span>
<span class="preprocessor"><span class="keyword">import</span> android.graphics.Bitmap;</span>
<span class="preprocessor"><span class="keyword">import</span> android.graphics.BitmapFactory;</span>
<span class="preprocessor"><span class="keyword">import</span> android.os.AsyncTask;</span>
<span class="preprocessor"><span class="keyword">import</span> android.widget.ImageView;</span>

<span class="preprocessor"><span class="keyword">import</span> org.apache.http.HttpResponse;</span>
<span class="preprocessor"><span class="keyword">import</span> org.apache.http.HttpStatus;</span>
<span class="preprocessor"><span class="keyword">import</span> org.apache.http.client.HttpClient;</span>
<span class="preprocessor"><span class="keyword">import</span> org.apache.http.client.methods.HttpGet;</span>
<span class="preprocessor"><span class="keyword">import</span> org.apache.http.impl.client.DefaultHttpClient;</span>

<span class="preprocessor"><span class="keyword">import</span> java.io.IOException;</span>

<span class="comment">/**
 * Created by JohnVenn on 2015/12/12.
 */</span>
<span class="class"><span class="keyword">class</span> <span class="title">ImageTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">String</span>,<span class="title">Void</span>,<span class="title">Bitmap</span>&gt; </span>{

    <span class="keyword">private</span> ProgressDialog dialog;
    <span class="keyword">private</span> Context context;
    <span class="keyword">private</span> ImageView imageView;
    ImageTask(Context context,ImageView imageView) {
        <span class="keyword">this</span>.context = context;
        <span class="keyword">this</span>.imageView = imageView;
    }

    @Override
    <span class="keyword">protected</span> Bitmap doInBackground(String... params) {
        Bitmap bitmap = <span class="literal">null</span>;
        HttpClient httpClient = <span class="keyword">new</span> DefaultHttpClient();
        HttpGet httpRequest = <span class="keyword">new</span> HttpGet(params[<span class="number">0</span>]);
        <span class="keyword">try</span> {
            HttpResponse httpResponse = httpClient.execute(httpRequest);
            <span class="keyword">if</span> (httpResponse.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                bitmap = BitmapFactory.decodeStream(httpResponse.getEntity().getContent());
            }
        } <span class="keyword">catch</span> (IOException e) {
            e.printStackTrace();
        }
        <span class="keyword">return</span> bitmap;
    }

    @Override
    <span class="keyword">protected</span> <span class="keyword">void</span> onPreExecute() {
        <span class="keyword">super</span>.onPreExecute();
        dialog = <span class="keyword">new</span> ProgressDialog(context);
        dialog.setTitle(<span class="string">"图片正在下载"</span>);
        dialog.setMessage(<span class="string">"正在为您玩命下载中......"</span>);
        dialog.setCancelable(<span class="literal">false</span>);
        dialog.show();
    }

    @Override
    <span class="keyword">protected</span> <span class="keyword">void</span> onPostExecute(Bitmap bitmap) {
        <span class="keyword">super</span>.onPostExecute(bitmap);
        imageView.setImageBitmap(bitmap);
        dialog.dismiss();
    }
}
</code></pre><p>　　<br>　　更多Android多线程的问题可以查看<a href="http://developer.android.com/guide/components/processes-and-threads.html" target="_blank" rel="external">AndroidDeveloper的官方指南</a>。了解更多AsyncTask，可以访问<a href="http://developer.android.com/reference/android/os/AsyncTask.html" target="_blank" rel="external">Android官方API</a>。（注：访问Android官方网站时，国内用户需要翻墙。无力吐槽。）</p>
<p><em>我的CSDN博客地址：<a href="http://blog.csdn.net/John_Venn" target="_blank" rel="external">http://blog.csdn.net/John_Venn</a></em></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>对Android开发者来说，如何处理多线程问题是无法绕过的问题。每个Android开发者或多或少都遇到过ANR(Application Not Responding)异常，Android默认当UI线程阻塞超过20s时将会引发ANR异常。因此在处理耗时操作时应当将其放入新线程中，但是这样将面临一个问题，如何在新线程中更新UI组件呢?<br>　　Android提供如下几种方案：Handler、AsyncTask、Activity.runOnUiThread(Runnable)、View.post(Runnable)和View.postDelayed(Runnable,long)。其中Handler功能最强大，处理最灵活，实际上AsyncTask正是对Handler的封装，而后三种方式则略显繁琐。AsyncTask是Android开发非常常用的处理多线程问题的工具，使用起来也简单方便，适用于简单的异步处理。<br>]]>
    
    </summary>
    
      <category term="Android" scheme="http://wenzhuang.me/tags/Android/"/>
    
      <category term="多线程" scheme="http://wenzhuang.me/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[摄影学习笔记之基本概念与法则]]></title>
    <link href="http://wenzhuang.me/2015/12/05/%E6%91%84%E5%BD%B1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E4%B8%8E%E6%B3%95%E5%88%99/"/>
    <id>http://wenzhuang.me/2015/12/05/摄影学习笔记之基本概念与法则/</id>
    <published>2015-12-05T14:53:24.000Z</published>
    <updated>2017-05-02T02:22:43.360Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>　　摄影带给我们一些什么呢？是一口新鲜空气、一股强烈的现实味道，它给予事物的几乎是一种实体的表现，是确实的和真理的无法定义的符号，摄影完全更新了人和宇宙的的关系。<br> 　　　　　　　　　    ——布拉塞</p>
</blockquote>
<a id="more"></a>
<h1 id="一、入门">一、入门</h1><h2 id="1_摄影作品分类">1　摄影作品分类</h2><ul>
<li>按题材：风光摄影、人像摄影、纪实摄影、小品摄影</li>
<li>按颜色：彩色、单色（黑白系、褐色系、蓝色系）</li>
<li>按影调：亮调、中间调、暗调</li>
</ul>
<h2 id="2_镜头：">2　镜头：</h2><p>超广角镜头、中长焦镜头、大光圈定焦镜头</p>
<ul>
<li>拍摄角度接近180°：鱼眼镜头</li>
<li>等效焦距&lt;20mm 超广角镜头</li>
<li>20~35mm 广角镜头</li>
<li>40~60mm 标准镜头</li>
<li>75~150mm 中焦镜头</li>
<li>150~300mm 长焦镜头</li>
<li>大于300mm 超长焦镜头</li>
</ul>
<h2 id="3_单反的对焦体系">3　单反的对焦体系</h2><ul>
<li>手动、自动对焦</li>
<li>对焦点选择：单点模式、AF自动区域模式、动态区域模式</li>
<li>单张自动对焦、连续自动对焦</li>
</ul>
<h3 id="拍摄静止物体时的设置：">拍摄静止物体时的设置：</h3><ul>
<li>自动对焦（AF）</li>
<li>单张自动对焦</li>
<li>对焦点选择：中心单点模式</li>
<li>拍摄方式：单张拍摄</li>
<li>对焦锁定：半按快门</li>
</ul>
<h2 id="4单反的测光体系">4单反的测光体系</h2><ul>
<li>曝光方式：程序自动(P)、光圈优先（Av）。快门优先(Tv)、手动曝光(M)</li>
<li>测光范围：全局/评价测光、中央重点测光、点测光<h3 id="一般设置：">一般设置：</h3></li>
<li>程序自动（P）</li>
<li>全局测光/评价测光</li>
<li>曝光锁定：默认</li>
<li>曝光补偿：微调</li>
</ul>
<h1 id="二、基本概念">二、基本概念</h1><h2 id="1-焦距">1.焦距</h2><p>焦距越小，角度越广；焦距越大，角度越窄</p>
<h2 id="2-等效焦距">2.等效焦距</h2><ul>
<li>全副相机：等效焦距=绝对焦距</li>
<li>非全副相机：等效焦距=绝对焦距*固定系数<br>尼康系数=1.5 佳能系数=1.6</li>
</ul>
<h2 id="3-对焦">3.对焦</h2><p>正确对焦后，所有过对焦点并且与相机感光器平行的平面都会足够清楚。</p>
<h2 id="4-快门速度">4.快门速度</h2><p>常见快门速度1/1000s、1/500s、1/250s、1/125s…….相邻两档是2倍的关系。<br>　　安全快门一般等于焦距的倒数，快门速度慢于安全快门容易产生抖动。<br>一级防抖镜头能使安全快门增高2档。手持相机拍摄快门速度尽量不要慢于1/30s。</p>
<h2 id="5-ISO值">5.ISO值</h2><p>ISO值是用来衡量感光器吸收光的能力的。ISO越高，感光速度越快。ISO常见的有ISO50、100、200、400……每项之间差一档，相邻两档是2倍的关系。ISO设置的比较高时，照片的噪点和颗粒将会明显增加。</p>
<h2 id="6-光圈值">6.光圈值</h2><p>常见光圈值f/1.4、f/2、f/2.8、f/4……相邻两档是1.4倍的关系。</p>
<h2 id="7-景深">7.景深</h2><p>影响景深的三个参数：</p>
<ul>
<li>光圈越大，景深越小；光圈越小，景深越大</li>
<li>焦距越大，景深越小；焦距越小，景深越大</li>
<li>对焦距离越近，景深越小；对焦距离越远，景深越大</li>
</ul>
<h2 id="8-色温与白平衡">8.色温与白平衡</h2><ul>
<li>颜色偏蓝称为色温偏高（偏冷）</li>
<li>颜色偏黄称为色温偏低（偏暖）</li>
<li>白色的光称为色温正常（色温标准）</li>
</ul>
<h2 id="9-反差">9.反差</h2><p>低反差（偏灰）、中反差、高反差（黑白）</p>
<h1 id="三、构图">三、构图</h1><h2 id="1-简单构图法">1.简单构图法</h2><p>九宫格构图、三分构图、对角线（斜线）构图、三角形构图、平行或垂直构图</p>
<h2 id="2-进阶构图法">2.进阶构图法</h2><p>重复构图、画框构图、光影、色彩构图、动静构图、放射式构图、构造消极空间</p>
<h1 id="四、测光">四、测光</h1><h2 id="1-曝光的等效性（互易率）">1.曝光的等效性（互易率）</h2><p>影响曝光的三个参数：快门速度、ISO值、光圈值。<br>　　不同曝光组合的照片也可能达到相同的亮度，只要这些照片的各个曝光参数之间的差距相互抵消。</p>
<h2 id="2-曝光参数确定准则">2.曝光参数确定准则</h2><p>高ISO值拍摄的画面会比较粗糙，噪点和颗粒会增加；快门速度慢于安全快门，画面容易发生抖动；光圈值会影响景深。<br>　　一般的设置为：ISO100；拍摄人物或小品，最大光圈；拍摄范围大的风景f/16；拍摄范围不大的风景f/8；快门速度在光圈优先模式下由相机给出。</p>
<h2 id="3-阳光16法则">3.阳光16法则</h2><p>从日出2~3小时后到日落2~3小时前，在明亮的阳光正面的物体适度曝光值为：光圈f/16，快门速度等于ISO 的倒数，及其所有与其等效的曝光组合。<br>如果不是晴天：薄云f/11，多云f/8，厚云（阴天）f/5.6，乌云f/4。</p>
<h2 id="4-测光的四个法则">4.测光的四个法则</h2><h3 id="第一法则：">第一法则：</h3><p>测光某一区域得到的曝光组合，就是使这一区域变成中等色调的曝光组合。每个颜色都唯一对应了一个曝补偿的值，如果想把一个颜色测准，只需设定正确的曝光补偿值即可。（白加黑减）</p>
<ul>
<li>白色 +2.0</li>
<li>粉红、新绿、浅蓝、黄 +1.0~+1.3</li>
<li>标准红、绿、蓝、中灰 0</li>
<li>深红、深绿、深蓝、亮紫  -1.3~-1.7</li>
<li>褐红、墨绿、暗蓝、紫色 -2.0~-2.3</li>
<li>黑色 -3.0</li>
</ul>
<h3 id="第二法则：">第二法则：</h3><p>对于受光情况相同的不同颜色，只要将其中任意一种颜色拍准，则同一张照片中的其他颜色也会按照自身的颜色显现。</p>
<h3 id="第三法则：">第三法则：</h3><p>对于受光不同的物体、实际之中比较亮的在画面中一定比实际之中偏暗的要亮。</p>
<h3 id="第四法则：">第四法则：</h3><ul>
<li>如果画面中最强光源下存在白色物体，只需对其点测光并设置曝光补偿为+2.0；</li>
<li>如果画面中最强光源下不存在白色物体，只需点测相对较亮处并设置相应的曝光补偿。<h2 id="5-夜景曝光法则">5.夜景曝光法则</h2>在夜晚为了拍摄城市灯光效果，适用的拍摄参数为ISO100，光圈f/16，快门30s</li>
</ul>
<h1 id="五、拍摄技巧">五、拍摄技巧</h1><h2 id="1-风光摄影">1.风光摄影</h2><ul>
<li>光线角度：顺光、侧光、逆光</li>
<li>焦距使用：超广角、中长焦、标准镜头</li>
<li>超焦距：当相机在这个对焦距离时，拍摄的照片在当前的焦距和这一档光圈下有最大的景深范围。</li>
<li>“三分之一处对焦法“：将焦点选择在画面下方三分之一处。<h2 id="2-滤镜">2.滤镜</h2></li>
<li>UV镜：吸收紫外线</li>
<li>天光镜：吸收紫外线、小部分紫光、蓝光<h3 id="风光摄影必备三大滤镜：">风光摄影必备三大滤镜：</h3></li>
<li>偏光镜（偏振镜）：过滤反射光线，增加成像反差<br>圆偏振镜（CPL）适合新式自动对焦相机<br>线偏正镜（LPL）适合老式手动对焦</li>
<li>中灰密度镜（中性灰度镜、灰镜、减光镜，简称ND镜），压暗进光光线，防止过曝。</li>
<li>减光镜：下半部分为透明，上半部分逐渐过渡到其他色调，渐变灰、渐变红、渐变蓝等。<br>灰渐变镜（GND镜）：一半透光、一半稍有阻光，主要用来平衡画面上下或者左右两部分的反差。<h2 id="3-人像外拍">3.人像外拍</h2><h3 id="基础设置：">基础设置：</h3></li>
<li>测光：全局测光</li>
<li>曝光方式：光圈优先，将光圈设置为最大较大</li>
<li>ISO设置到最小，快门速度由相机测定</li>
<li>根据照片亮度使用曝光补偿进行微调</li>
</ul>
<p>  <img src="http://7xo4wg.com1.z0.glb.clouddn.com/photography_girl.jpg" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>　　摄影带给我们一些什么呢？是一口新鲜空气、一股强烈的现实味道，它给予事物的几乎是一种实体的表现，是确实的和真理的无法定义的符号，摄影完全更新了人和宇宙的的关系。<br> 　　　　　　　　　    ——布拉塞</p>
</blockquote>]]>
    
    </summary>
    
      <category term="摄影" scheme="http://wenzhuang.me/tags/%E6%91%84%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用HttpClient处理HTTP请求]]></title>
    <link href="http://wenzhuang.me/2015/11/28/%E4%BD%BF%E7%94%A8HttpCLient%E5%A4%84%E7%90%86HTTP%E8%AF%B7%E6%B1%82/"/>
    <id>http://wenzhuang.me/2015/11/28/使用HttpCLient处理HTTP请求/</id>
    <published>2015-11-28T14:47:25.000Z</published>
    <updated>2015-12-24T11:03:37.605Z</updated>
    <content type="html"><![CDATA[<p>无论是B/S还是C/S，只要是涉及客户端与服务器的通信，那么如何处理HTTP请求就是无法避免的问题。<br>　　Java封装了HttpURLConnection提供给Java程序员做HTTP网络请求，然而使用HttpURLConnection做HTTP请求比较繁琐。如何简单快速地实现HTTP请求呢？Apache提供了一个专门用于处理HTTP请求的库HttpClient，使用起来方便快捷。<br>　　<a id="more"></a><br>　　Java开发者使用HttpClient需要先到<a href="http://hc.apache.org/httpclient-3.x/" target="_blank" rel="external">ApacheHttpClient官网</a>下载相关的jar包。对于Android开发者来说，HttpClient几乎是最常用的用于处理HTTP请求的工具，在API21（Android4.4）及更早版本的SDK中，HttpClient被集成在SDK中，方便Android开发者处理HTTP请求。然而在API22及更新的Android SDK中HttpClient已经被去掉，然而开发者依然可以使用导入外部包的方式继续使用HttpClient进行开发。如果你是AndroidStudio用户，你还可以gradle进行包依赖管理,在build.gradle中加入如下声明：</p>
<pre><code>　<span class="title">android</span> {
    <span class="title">useLibrary</span> <span class="string">'org.apache.http.legacy'</span>
}
</code></pre><p>Http请求最常用的是Get和Post请求，对于HTTP协议及其方法此处不再赘述。对于Post和Get请求，HttpClient都封装了相应的类和方法方便开发者的使用。<br>　　笔者使用HttpClient写了一个工具类HttpUtils，包含两个静态方法doGet(String)和doPost(String,Map)分别实现了Get请求和Post请求。源代码已上传至Github的<a href="https://github.com/WenZhuang/AndroidUtils/blob/master/HttpUtils.java" target="_blank" rel="external">AndroidUtils仓库</a>。<br>　　<img src="http://7xo4wg.com1.z0.glb.clouddn.com/Apache_logo.jpg" alt=""><br>　　以下是doGet方法的源代码，方法调用者需要传入一个目标URL地址作为参数，响应成功时返回响应字符串，失败时返回相应的响应码（如404）。首先需要创建一个HttpClient对象和一个HttpGet对象，给HttpGet设置请求参数（如设置响应超时时间等）这部分并非是必须的。HttpClient对象只需调用execute(HttpGet)方法就可以获得一个HttpResponse对象，该对象包含从服务器获取的HTTP响应。调用getEntity方法获取Http响应体。</p>
<pre><code><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">doGet</span>(<span class="params">String url</span>)</span>{
        String responseStr = <span class="string">"Fail"</span>;
        <span class="keyword">try</span> {
            HttpClient httpClient = <span class="keyword">new</span> DefaultHttpClient();
            HttpGet httpRequest = <span class="keyword">new</span> HttpGet(url);

            <span class="comment">//设置请求参数</span>
            HttpParams <span class="keyword">params</span> = <span class="keyword">new</span> BasicHttpParams();
            <span class="comment">// 从连接池中获取连接的超时时间</span>
            ConnManagerParams.setTimeout(<span class="keyword">params</span>, <span class="number">1000</span>);
            <span class="comment">// 通过网络与服务器建立连接的超时时间</span>
            HttpConnectionParams.setConnectionTimeout(<span class="keyword">params</span>, <span class="number">3000</span>);
            <span class="comment">// 读响应数据的超时时间</span>
            HttpConnectionParams.setSoTimeout(<span class="keyword">params</span>, <span class="number">5000</span>);
            httpRequest.setParams(<span class="keyword">params</span>);


            HttpResponse httpResponse = httpClient.execute(httpRequest);
            final <span class="keyword">int</span> ret = httpResponse.getStatusLine().getStatusCode();
            <span class="keyword">if</span> (ret == HttpStatus.SC_OK) {
                responseStr = EntityUtils.toString(httpResponse.getEntity(), HTTP.UTF_8);
            } <span class="keyword">else</span> {
                responseStr = String.valueOf(ret);
            }

        } <span class="keyword">catch</span> (UnsupportedEncodingException e) {
            <span class="comment">// TODO Auto-generated catch block</span>
            e.printStackTrace();
        } <span class="keyword">catch</span> (ClientProtocolException e) {
            <span class="comment">// TODO Auto-generated catch block</span>
            e.printStackTrace();
        } <span class="keyword">catch</span> (IOException e) {
            <span class="comment">// TODO Auto-generated catch block</span>
            e.printStackTrace();
        }

        <span class="keyword">return</span> responseStr;
    }
</code></pre><p>　　<br>　　以下是doPost方法的源代码。调用者需要传入一个目标URL地址和一个Map作为参数。响应成功时返回响应字符串，失败时返回相应的响应码。调用者在调用doPost前需要将请求参数以键值对的方式存入Map中，再将Map作为doPost的参数。首先需要创建一个HttpClient对象和一个HttpPost对象，依次取出Map里的参数存入包含BasicNameValuePair的list中。调用HttpPost的setEntity的方法装入请求体。HttpClient对象调用execute(HttpPost)方法就可以获得一个HttpResponse对象,处理方式与doGet方法相同。
　　</p>
<pre><code> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">String</span> doPost(<span class="keyword">String</span> url, Map&lt;<span class="keyword">String</span>,<span class="keyword">String</span>&gt; <span class="built_in">map</span>) {
    <span class="keyword">String</span> responseStr = <span class="string">"Fail"</span>;
    <span class="keyword">try</span> {
        HttpPost httpRequest = <span class="keyword">new</span> HttpPost(url);

        <span class="comment">//设置请求参数</span>
        HttpParams params = <span class="keyword">new</span> BasicHttpParams();
        <span class="comment">// 从连接池中获取连接的超时时间</span>
        ConnManagerParams.setTimeout(params, <span class="number">1000</span>);
        <span class="comment">// 通过网络与服务器建立连接的超时时间</span>
        HttpConnectionParams.setConnectionTimeout(params, <span class="number">3000</span>);
        <span class="comment">// 读响应数据的超时时间</span>
        HttpConnectionParams.setSoTimeout(params, <span class="number">5000</span>);
        httpRequest.setParams(params);

        <span class="comment">// 下面开始跟服务器传递数据，使用BasicNameValuePair</span>
        List&lt;BasicNameValuePair&gt; paramsList = <span class="keyword">new</span> ArrayList&lt;&gt;();
        <span class="keyword">for</span>(<span class="keyword">String</span> <span class="variable">key</span> : <span class="built_in">map</span>.keySet()){
            paramsList.<span class="built_in">add</span>(<span class="keyword">new</span> BasicNameValuePair(<span class="variable">key</span> , <span class="built_in">map</span>.<span class="built_in">get</span>(<span class="variable">key</span>)));
        }

        httpRequest.setEntity(<span class="keyword">new</span> UrlEncodedFormEntity(
                paramsList, HTTP.UTF_8));

        HttpClient httpClient = <span class="keyword">new</span> DefaultHttpClient();
        HttpResponse httpResponse = httpClient.execute(httpRequest);
        <span class="keyword">final</span> <span class="built_in">int</span> ret = httpResponse.getStatusLine().getStatusCode();
        <span class="keyword">if</span> (ret == HttpStatus.SC_OK) {
             responseStr = EntityUtils.toString(httpResponse.getEntity(),HTTP.UTF_8);
        } <span class="keyword">else</span> {
            responseStr = <span class="keyword">String</span>.valueOf(ret);
        }

    } <span class="keyword">catch</span> (UnsupportedEncodingException e) {
        <span class="comment">// TODO Auto-generated catch block</span>
        e.printStackTrace();
    } <span class="keyword">catch</span> (ClientProtocolException e) {
        <span class="comment">// TODO Auto-generated catch block</span>
        e.printStackTrace();
    } <span class="keyword">catch</span> (IOException e) {
        <span class="comment">// TODO Auto-generated catch block</span>
        e.printStackTrace();
    }

    <span class="keyword">return</span> responseStr;
}
</code></pre><p>参考链接：<br>　<a href="http://developer.android.com/about/versions/marshmallow/android-6.0-changes.html#behavior-apache-http-client" target="_blank" rel="external">http://developer.android.com/about/versions/marshmallow/android-6.0-changes.html#behavior-apache-http-client</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>无论是B/S还是C/S，只要是涉及客户端与服务器的通信，那么如何处理HTTP请求就是无法避免的问题。<br>　　Java封装了HttpURLConnection提供给Java程序员做HTTP网络请求，然而使用HttpURLConnection做HTTP请求比较繁琐。如何简单快速地实现HTTP请求呢？Apache提供了一个专门用于处理HTTP请求的库HttpClient，使用起来方便快捷。<br>]]>
    
    </summary>
    
      <category term="Android" scheme="http://wenzhuang.me/tags/Android/"/>
    
      <category term="HTTP" scheme="http://wenzhuang.me/tags/HTTP/"/>
    
      <category term="Java" scheme="http://wenzhuang.me/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Život je jinde]]></title>
    <link href="http://wenzhuang.me/2015/11/22/Zivot-je-jinde/"/>
    <id>http://wenzhuang.me/2015/11/22/Zivot-je-jinde/</id>
    <published>2015-11-22T09:59:06.000Z</published>
    <updated>2015-12-24T10:39:39.347Z</updated>
    <content type="html"><![CDATA[<p><em>原文：</em><a href="http://wenzhuang.me/2015/11/21/%E7%94%9F%E6%B4%BB%E5%9C%A8%E5%88%AB%E5%A4%84/"><em>《生活在别处》</em></a></p>
<blockquote>
<p> 我还年轻，我渴望上路。<br>　 ——杰克·凯鲁亚克<br>　 《在路上》<br><a id="more"></a><br>法国诗人波兰说：“生活在别处。”米兰·昆德拉将其作为书名后，这句话开始变得家喻户晓。其中的“别处”意义让人迷醉，“生活在别处”成为旅行者、追求自由的文艺青年们生活的标杆。年轻人们背上背包，迷上酒精和摇滚，口中吟唱“垮掉的一代”写下的句子，在大漠的公路上摇摇晃晃，为的是逃离现实生活的束缚，卸下包裹和伪装。没有什么能困住自己，如果你决心逃离。<br>　　这些年来，我已去过许多地方，它们跟我去过的其它地方一样都是“别处”。而这些许许多多的“别处”，总是容易让你想起你自己现在生活的地方，不是因为似曾相识，而是因为完全相异。这也是为什么我总是想到北京，想到我自己的生活。我想我到底是被现实的什么困住了。到了“别处”，脱离原来生活的模式，你才能聆听自己内心的呐喊，开始明白些什么。<br>　　<img src="http://7xo4wg.com1.z0.glb.clouddn.com/on-the-road2.jpg" alt=""><br>　　保罗·柯艾略的《牧羊少年奇幻之旅》，有牧羊少年圣地亚哥与自己的心对话的情节，我起初很不解，现在终于明白了，人确实是可以与自己对话，听到自己的声音的。而在熟悉的地方，在自己的角色中，很难唤醒真实的自己。圣地亚哥到最后也没有找到宝藏，而且还被揍了一顿，但是他已经明白，真正的宝藏是什么。<br>　　前几天看了一部电影《楚门的世界》，讲述了这样一个故事，楚门从小生长在巨大的片场中，生活都是导演好的一场戏，而他毫不知情，他本可以在温柔的襁褓中过完一生，但为了自由和爱，他找到了通往现实世界的大门。其实每个都是楚门。人的局限性太大了，容易被自己困住，或者说被自己在生活中扮演的角色困住。人的局限性是人作茧自缚的根源，当你去了“别处”，你会脱离现实关系网的束缚，想到自己如果生活和成长在这个城市会是怎样的，环境到底对人的影响多大。于是你才开始重新审视自己的生活，想到重新构建自己的生活，想到独立，想到回到熟悉的地方后如何清理或隔绝周围的噪音。生活是个迷局，你不跳出来又如何看的清。<br>　　<img src="http://7xo4wg.com1.z0.glb.clouddn.com/on-the-road1.jpg" alt=""><br>　　有不少朋友对我说，他们很向往来北京。我想，人总是这样，站在自己的位置，向往他人的生活，或者说人总是想“生活在别处”。尽管“别处”的意义对每个人的意义不同，因为你的“别处”，可能正是我的“此处”。正如钱钟书《围城》里所说“城外的人想冲进去,城里的人想逃出来”，我们只要做到不被自己困在围城里。失败并不能让自己成长，让自己成长的是失败后的思考和改变，阿Q式的自我欺骗只会让自己再次深陷泥淖；时间也不能治愈什么，如果不突破局限，沟壑也难以填平。既然我们不能像史铁生那样有“我不等于史铁生，史铁生只是我的一个躯体”这样灵魂高度的超脱，那我们就应该去“别处”看看，这样才能重新审视自己的困局。旅行和思考的意义在于成长，就是一个逐渐构筑和突破围城的过程。<br>　　不管怎样，我希望每一次的出行每一次的访友，都能让自己有那么一点成长。它至少让我明白，我现在的生活是多么的局限。世界这么大，如果我们不去看外面的世界，那我们就是被现实困住的楚门。而我希望能成为寻找宝藏的圣地亚哥。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><em>原文：</em><a href="http://wenzhuang.me/2015/11/21/%E7%94%9F%E6%B4%BB%E5%9C%A8%E5%88%AB%E5%A4%84/"><em>《生活在别处》</em></a></p>
<blockquote>
<p> 我还年轻，我渴望上路。<br>　 ——杰克·凯鲁亚克<br>　 《在路上》<br>]]>
    
    </summary>
    
      <category term="随笔" scheme="http://wenzhuang.me/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[生活在别处]]></title>
    <link href="http://wenzhuang.me/2015/11/21/%E7%94%9F%E6%B4%BB%E5%9C%A8%E5%88%AB%E5%A4%84/"/>
    <id>http://wenzhuang.me/2015/11/21/生活在别处/</id>
    <published>2015-11-21T08:59:27.000Z</published>
    <updated>2015-12-24T10:38:45.044Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p> 我还年轻，我渴望上路。<br>　 ——杰克·凯鲁亚克<br>　 《在路上》<br><a id="more"></a><br>法国诗人波兰说：“生活在别处。”米兰·昆德拉将其作为书名后，这句话开始变得家喻户晓。其中的“别处”意义让人迷醉，“生活在别处”成为旅行者、追求自由的文艺青年们生活的标杆。年轻人们背上背包，迷上酒精和摇滚，口中吟唱“垮掉的一代”写下的句子，在大漠的公路上摇摇晃晃，为的是逃离现实生活的束缚，卸下包裹和伪装。没有什么能困住自己，如果你决心逃离。<br>　　这些年来，我已去过许多地方，它们跟我去过的其它地方一样都是“别处”。而这些许许多多的“别处”，总是容易让你想起你自己现在生活的地方，不是因为似曾相识，而是因为完全相异。这也是为什么我总是想到北京，想到我自己的生活。我想我到底是被现实的什么困住了。到了“别处”，脱离原来生活的模式，你才能聆听自己内心的呐喊，开始明白些什么。<br>　　<img src="http://7xo4wg.com1.z0.glb.clouddn.com/on-the-road2.jpg" alt=""><br>　　保罗·柯艾略的《牧羊少年奇幻之旅》，有牧羊少年圣地亚哥与自己的心对话的情节，我起初很不解，现在终于明白了，人确实是可以与自己对话，听到自己的声音的。而在熟悉的地方，在自己的角色中，很难唤醒真实的自己。圣地亚哥到最后也没有找到宝藏，而且还被揍了一顿，但是他已经明白，真正的宝藏是什么。<br>　　前几天看了一部电影《楚门的世界》，讲述了这样一个故事，楚门从小生长在巨大的片场中，生活都是导演好的一场戏，而他毫不知情，他本可以在温柔的襁褓中过完一生，但为了自由和爱，他找到了通往现实世界的大门。其实每个都是楚门。人的局限性太大了，容易被自己困住，或者说被自己在生活中扮演的角色困住。人的局限性是人作茧自缚的根源，当你去了“别处”，你会脱离现实关系网的束缚，想到自己如果生活和成长在这个城市会是怎样的，环境到底对人的影响多大。于是你才开始重新审视自己的生活，想到重新构建自己的生活，想到独立，想到回到熟悉的地方后如何清理或隔绝周围的噪音。生活是个迷局，你不跳出来又如何看的清。<br>　　<img src="http://7xo4wg.com1.z0.glb.clouddn.com/on-the-road1.jpg" alt=""><br>　　有不少朋友对我说，他们很向往来北京。我想，人总是这样，站在自己的位置，向往他人的生活，或者说人总是想“生活在别处”。尽管“别处”的意义对每个人的意义不同，因为你的“别处”，可能正是我的“此处”。正如钱钟书《围城》里所说“城外的人想冲进去,城里的人想逃出来”，我们只要做到不被自己困在围城里。失败并不能让自己成长，让自己成长的是失败后的思考和改变，阿Q式的自我欺骗只会让自己再次深陷泥淖；时间也不能治愈什么，如果不突破局限，沟壑也难以填平。既然我们不能像史铁生那样有“我不等于史铁生，史铁生只是我的一个躯体”这样灵魂高度的超脱，那我们就应该去“别处”看看，这样才能重新审视自己的困局。旅行和思考的意义在于成长，就是一个逐渐构筑和突破围城的过程。<br>　　不管怎样，我希望每一次的出行每一次的访友，都能让自己有那么一点成长。它至少让我明白，我现在的生活是多么的局限。世界这么大，如果我们不去看外面的世界，那我们就是被现实困住的楚门。而我希望能成为寻找宝藏的圣地亚哥。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p> 我还年轻，我渴望上路。<br>　 ——杰克·凯鲁亚克<br>　 《在路上》<br>]]>
    
    </summary>
    
      <category term="随笔" scheme="http://wenzhuang.me/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[苏州印象]]></title>
    <link href="http://wenzhuang.me/2015/11/14/%E8%8B%8F%E5%B7%9E%E5%8D%B0%E8%B1%A1/"/>
    <id>http://wenzhuang.me/2015/11/14/苏州印象/</id>
    <published>2015-11-14T12:38:09.000Z</published>
    <updated>2015-12-24T10:39:11.332Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p><em>那时我们有梦，关于文学，关于爱情，关于穿越世界的旅行。如今我们深夜饮酒，杯子碰到一起，都是梦破碎的声音。<br>　　　　　　　　　　　　　　　　　　　——北岛《波兰来客》</em><br><a id="more"></a><br>谈起苏州，你总是不能用苏州之旅或者苏州游记这样的词汇来形容她，你想到的是文艺清新、烟雨蒙蒙，你总是想到白墙黑瓦的老房子，你想到了护城河边的吴侬软语，你想到了悠长悠长而又寂寥的雨巷，对面走来一位撑着油纸伞结着丁香花般仇怨的姑娘。你想到的是透过烟雨蒙蒙的小巷穿过记忆回廊的苏州印象。模糊又清晰。苏州就像一块透明的玻璃，而回忆就像是轻轻呵了一口气，她就变得模糊飘渺。其实，北京也是一块玻璃，不过是块毛玻璃，易碎、尖锐、忧伤，往玻璃窗户外面一看，PM2.5又爆表了。<br>　　      　　　<img src="http://7xo4wg.com1.z0.glb.clouddn.com/%E6%B1%9F%E5%8D%97%E6%B0%B4%E4%B9%A1.jpg" alt="江南水乡"><br>　　苏州是个文艺的城市。不过苏州的文艺是小清新的、透明的、带着淡淡忧伤的。平江路那边，挨着一条河，河的另一边是白墙黑瓦的民居，另一边就是平江路了。林立着卖各种饰品的小店，书店里弥漫着咖啡的香气。苏州的老奶奶们，头上带着花，却毫无违和感，你可以隐隐看到她们的年代。吴侬软语温柔如同梦呓。他们的家住在河边，江南的水让她们变得温柔。不幸的是，我没见过苏州烟雨蒙蒙的样子，我去的几天她一直在灿烂的笑，阳光满面，直到我离开的那天她才开始显现愁容，变成阴天。<br>　　<img src="http://7xo4wg.com1.z0.glb.clouddn.com/%E8%80%81%E8%8B%8F%E5%B7%9E.jpg" alt="老苏州"><br>　　其实北京也是座文艺的城市，不过北京的文艺是破碎的、忧伤的、飘摇不定的。在后海酒吧街，在地下通道，在地铁拥挤的人群中，你总是能看到那些北漂的年轻人，他们背着一把破木吉他，唱着自己的愤怒和哀伤。那些撕哑的声音飘在寒风中，听起来，有时候像是梦的声音，有时候像是梦破碎的声音。<br>　　<img src="http://7xo4wg.com1.z0.glb.clouddn.com/%E5%B9%B3%E6%B1%9F%E8%B7%AF.jpg" alt="平江路夜景"><br>　　叶圣陶在《苏州园林》里说到：“倘若要我说说总的印象，我觉得苏州园林是我国各地园林的标本，各地园林或多或少都受到苏州园林的影响。因此，谁如果要鉴赏我国的园林，苏州园林就不该错过。”很显然苏州是一座园林城市。园林就是这座城市的文化名片。我自己去过的园林并不多，只去了网师园和狮子林。但这并不影响我观赏园林，因为这座城市到处充满了园林的影子，或者说这座城市本身就是一座巨大的园林，各处的建筑都仿造园林的样式。例如苏州大学，学校里的建筑风格就是典型的苏州园林，虎丘公园各处的建筑也都是园林的样式，甚至连公交站都设计成凉亭或屋檐的模样。老苏州的建筑保护非常完好，政府规定不能有超过六层的建筑。在这座城市应该是什么样的定位上，苏州非常清楚。<br>　　<img src="http://7xo4wg.com1.z0.glb.clouddn.com/%E7%BD%91%E5%B8%88%E5%9B%AD.jpg" alt="网师园"><br>　　北京有些地方的建筑保护也还算完好，有一次去琉璃厂那边，进到胡同里，误以为进入另一个世界，里面的居民生活非常原生态，与外部的现代化快节奏生活隔离开来，很难想象北京还有这样一块地方。不过北京对自己的定位比较尴尬，之前想把鸟巢打造成新的地标，结果没能成功。鸟巢这样的建筑虽然很大气，但是给不了人们多少文化寄托，所以北京的地标依旧是故宫、天安门。<br>　　<img src="http://7xo4wg.com1.z0.glb.clouddn.com/%E7%AA%97%E8%8A%B1.jpg" alt="窗花"><br>　　虽然我不懂园林艺术，但是作为北京林业大学的学生，来到园林的圣地，还是感觉些许圣神。论及我最喜欢的园林，要数狮子林了。其中的假山饶有趣味，狮子林并不大，但是其中的山洞却又感觉增加了无穷无尽的空间。从一端进洞，你绝不会猜到出口在何方，不得不感叹工匠的鬼才。秋天狮子林还可以看到不少学生在那里写生，我心中暗自想如果北林园林院如果是在苏州，也许更加合适。<br>     <img src="http://7xo4wg.com1.z0.glb.clouddn.com/%E8%97%A4%E8%94%93.jpg" alt="藤蔓">　<br> 　　其实北京也是有园林的，跟苏州的私家园林不同，北京的是皇家园林。世界上最大的园林就是圆明园了，如今已是断壁残垣，最著名的大水法残壁被铁链锁住，供远道而来的游客们观瞻合影。镜头前人们举着剪刀手嘟着嘴卖着萌喊着“茄子”，咔嚓，身后是一百五十年前熊熊燃烧的大火。<br>　　<img src="http://7xo4wg.com1.z0.glb.clouddn.com/%E9%BB%84%E6%98%8F.jpg" alt="黄昏"></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p><em>那时我们有梦，关于文学，关于爱情，关于穿越世界的旅行。如今我们深夜饮酒，杯子碰到一起，都是梦破碎的声音。<br>　　　　　　　　　　　　　　　　　　　——北岛《波兰来客》</em><br>]]>
    
    </summary>
    
      <category term="游记" scheme="http://wenzhuang.me/tags/%E6%B8%B8%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://wenzhuang.me/2015/11/07/hello-world/"/>
    <id>http://wenzhuang.me/2015/11/07/hello-world/</id>
    <published>2015-11-07T15:55:20.000Z</published>
    <updated>2015-12-24T10:48:53.786Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.<br><a id="more"></a></p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.<br>]]>
    
    </summary>
    
  </entry>
  
</feed>
